// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package apikeyserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiKeyServerClient is the client API for ApiKeyServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiKeyServerClient interface {
	GetKey(ctx context.Context, in *RequestKey, opts ...grpc.CallOption) (*GetKeyResponse, error)
	KillKey(ctx context.Context, in *RequestKillKey, opts ...grpc.CallOption) (*GenericKillResponse, error)
	PermKillKey(ctx context.Context, in *RequestPermKillKey, opts ...grpc.CallOption) (*GenericKillResponse, error)
	GetServerInfo(ctx context.Context, in *RequestServerInfo, opts ...grpc.CallOption) (*GetServerInfoResponse, error)
}

type apiKeyServerClient struct {
	cc grpc.ClientConnInterface
}

func NewApiKeyServerClient(cc grpc.ClientConnInterface) ApiKeyServerClient {
	return &apiKeyServerClient{cc}
}

func (c *apiKeyServerClient) GetKey(ctx context.Context, in *RequestKey, opts ...grpc.CallOption) (*GetKeyResponse, error) {
	out := new(GetKeyResponse)
	err := c.cc.Invoke(ctx, "/apikeyserver.ApiKeyServer/GetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyServerClient) KillKey(ctx context.Context, in *RequestKillKey, opts ...grpc.CallOption) (*GenericKillResponse, error) {
	out := new(GenericKillResponse)
	err := c.cc.Invoke(ctx, "/apikeyserver.ApiKeyServer/KillKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyServerClient) PermKillKey(ctx context.Context, in *RequestPermKillKey, opts ...grpc.CallOption) (*GenericKillResponse, error) {
	out := new(GenericKillResponse)
	err := c.cc.Invoke(ctx, "/apikeyserver.ApiKeyServer/PermKillKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyServerClient) GetServerInfo(ctx context.Context, in *RequestServerInfo, opts ...grpc.CallOption) (*GetServerInfoResponse, error) {
	out := new(GetServerInfoResponse)
	err := c.cc.Invoke(ctx, "/apikeyserver.ApiKeyServer/GetServerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiKeyServerServer is the server API for ApiKeyServer service.
// All implementations must embed UnimplementedApiKeyServerServer
// for forward compatibility
type ApiKeyServerServer interface {
	GetKey(context.Context, *RequestKey) (*GetKeyResponse, error)
	KillKey(context.Context, *RequestKillKey) (*GenericKillResponse, error)
	PermKillKey(context.Context, *RequestPermKillKey) (*GenericKillResponse, error)
	GetServerInfo(context.Context, *RequestServerInfo) (*GetServerInfoResponse, error)
	mustEmbedUnimplementedApiKeyServerServer()
}

// UnimplementedApiKeyServerServer must be embedded to have forward compatible implementations.
type UnimplementedApiKeyServerServer struct {
}

func (UnimplementedApiKeyServerServer) GetKey(context.Context, *RequestKey) (*GetKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedApiKeyServerServer) KillKey(context.Context, *RequestKillKey) (*GenericKillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillKey not implemented")
}
func (UnimplementedApiKeyServerServer) PermKillKey(context.Context, *RequestPermKillKey) (*GenericKillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermKillKey not implemented")
}
func (UnimplementedApiKeyServerServer) GetServerInfo(context.Context, *RequestServerInfo) (*GetServerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerInfo not implemented")
}
func (UnimplementedApiKeyServerServer) mustEmbedUnimplementedApiKeyServerServer() {}

// UnsafeApiKeyServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiKeyServerServer will
// result in compilation errors.
type UnsafeApiKeyServerServer interface {
	mustEmbedUnimplementedApiKeyServerServer()
}

func RegisterApiKeyServerServer(s grpc.ServiceRegistrar, srv ApiKeyServerServer) {
	s.RegisterService(&ApiKeyServer_ServiceDesc, srv)
}

func _ApiKeyServer_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServerServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apikeyserver.ApiKeyServer/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServerServer).GetKey(ctx, req.(*RequestKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeyServer_KillKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestKillKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServerServer).KillKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apikeyserver.ApiKeyServer/KillKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServerServer).KillKey(ctx, req.(*RequestKillKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeyServer_PermKillKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPermKillKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServerServer).PermKillKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apikeyserver.ApiKeyServer/PermKillKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServerServer).PermKillKey(ctx, req.(*RequestPermKillKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeyServer_GetServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestServerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServerServer).GetServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apikeyserver.ApiKeyServer/GetServerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServerServer).GetServerInfo(ctx, req.(*RequestServerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiKeyServer_ServiceDesc is the grpc.ServiceDesc for ApiKeyServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiKeyServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apikeyserver.ApiKeyServer",
	HandlerType: (*ApiKeyServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKey",
			Handler:    _ApiKeyServer_GetKey_Handler,
		},
		{
			MethodName: "KillKey",
			Handler:    _ApiKeyServer_KillKey_Handler,
		},
		{
			MethodName: "PermKillKey",
			Handler:    _ApiKeyServer_PermKillKey_Handler,
		},
		{
			MethodName: "GetServerInfo",
			Handler:    _ApiKeyServer_GetServerInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apiKeyServer.proto",
}
