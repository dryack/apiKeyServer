// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apiKeyServer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_apiKeyServer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_apiKeyServer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_apiKeyServer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_apiKeyServer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_apiKeyServer_2eproto;
namespace apikeyserver {
class GenericKillResponse;
class GenericKillResponseDefaultTypeInternal;
extern GenericKillResponseDefaultTypeInternal _GenericKillResponse_default_instance_;
class GetKeyResponse;
class GetKeyResponseDefaultTypeInternal;
extern GetKeyResponseDefaultTypeInternal _GetKeyResponse_default_instance_;
class GetServerInfoResponse;
class GetServerInfoResponseDefaultTypeInternal;
extern GetServerInfoResponseDefaultTypeInternal _GetServerInfoResponse_default_instance_;
class KeyDetailsResponse;
class KeyDetailsResponseDefaultTypeInternal;
extern KeyDetailsResponseDefaultTypeInternal _KeyDetailsResponse_default_instance_;
class KeyResponseRemaining;
class KeyResponseRemainingDefaultTypeInternal;
extern KeyResponseRemainingDefaultTypeInternal _KeyResponseRemaining_default_instance_;
class KeyResponseTypeNames;
class KeyResponseTypeNamesDefaultTypeInternal;
extern KeyResponseTypeNamesDefaultTypeInternal _KeyResponseTypeNames_default_instance_;
class RequestKey;
class RequestKeyDefaultTypeInternal;
extern RequestKeyDefaultTypeInternal _RequestKey_default_instance_;
class RequestKillKey;
class RequestKillKeyDefaultTypeInternal;
extern RequestKillKeyDefaultTypeInternal _RequestKillKey_default_instance_;
class RequestPermKillKey;
class RequestPermKillKeyDefaultTypeInternal;
extern RequestPermKillKeyDefaultTypeInternal _RequestPermKillKey_default_instance_;
class RequestServerInfo;
class RequestServerInfoDefaultTypeInternal;
extern RequestServerInfoDefaultTypeInternal _RequestServerInfo_default_instance_;
class RequestTimedKillKey;
class RequestTimedKillKeyDefaultTypeInternal;
extern RequestTimedKillKeyDefaultTypeInternal _RequestTimedKillKey_default_instance_;
class TimedKillResponse;
class TimedKillResponseDefaultTypeInternal;
extern TimedKillResponseDefaultTypeInternal _TimedKillResponse_default_instance_;
}  // namespace apikeyserver
PROTOBUF_NAMESPACE_OPEN
template<> ::apikeyserver::GenericKillResponse* Arena::CreateMaybeMessage<::apikeyserver::GenericKillResponse>(Arena*);
template<> ::apikeyserver::GetKeyResponse* Arena::CreateMaybeMessage<::apikeyserver::GetKeyResponse>(Arena*);
template<> ::apikeyserver::GetServerInfoResponse* Arena::CreateMaybeMessage<::apikeyserver::GetServerInfoResponse>(Arena*);
template<> ::apikeyserver::KeyDetailsResponse* Arena::CreateMaybeMessage<::apikeyserver::KeyDetailsResponse>(Arena*);
template<> ::apikeyserver::KeyResponseRemaining* Arena::CreateMaybeMessage<::apikeyserver::KeyResponseRemaining>(Arena*);
template<> ::apikeyserver::KeyResponseTypeNames* Arena::CreateMaybeMessage<::apikeyserver::KeyResponseTypeNames>(Arena*);
template<> ::apikeyserver::RequestKey* Arena::CreateMaybeMessage<::apikeyserver::RequestKey>(Arena*);
template<> ::apikeyserver::RequestKillKey* Arena::CreateMaybeMessage<::apikeyserver::RequestKillKey>(Arena*);
template<> ::apikeyserver::RequestPermKillKey* Arena::CreateMaybeMessage<::apikeyserver::RequestPermKillKey>(Arena*);
template<> ::apikeyserver::RequestServerInfo* Arena::CreateMaybeMessage<::apikeyserver::RequestServerInfo>(Arena*);
template<> ::apikeyserver::RequestTimedKillKey* Arena::CreateMaybeMessage<::apikeyserver::RequestTimedKillKey>(Arena*);
template<> ::apikeyserver::TimedKillResponse* Arena::CreateMaybeMessage<::apikeyserver::TimedKillResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apikeyserver {

// ===================================================================

class RequestKey :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apikeyserver.RequestKey) */ {
 public:
  RequestKey();
  virtual ~RequestKey();

  RequestKey(const RequestKey& from);
  RequestKey(RequestKey&& from) noexcept
    : RequestKey() {
    *this = ::std::move(from);
  }

  inline RequestKey& operator=(const RequestKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestKey& operator=(RequestKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestKey* internal_default_instance() {
    return reinterpret_cast<const RequestKey*>(
               &_RequestKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestKey& a, RequestKey& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestKey* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestKey* New() const final {
    return CreateMaybeMessage<RequestKey>(nullptr);
  }

  RequestKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestKey& from);
  void MergeFrom(const RequestKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apikeyserver.RequestKey";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apiKeyServer_2eproto);
    return ::descriptor_table_apiKeyServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequesterFieldNumber = 1,
    kTypeFieldNumber = 2,
    kFieldMaskFieldNumber = 4,
    kAcceptExhaustionFieldNumber = 3,
  };
  // string requester = 1;
  void clear_requester();
  const std::string& requester() const;
  void set_requester(const std::string& value);
  void set_requester(std::string&& value);
  void set_requester(const char* value);
  void set_requester(const char* value, size_t size);
  std::string* mutable_requester();
  std::string* release_requester();
  void set_allocated_requester(std::string* requester);
  private:
  const std::string& _internal_requester() const;
  void _internal_set_requester(const std::string& value);
  std::string* _internal_mutable_requester();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .google.protobuf.FieldMask field_mask = 4;
  bool has_field_mask() const;
  private:
  bool _internal_has_field_mask() const;
  public:
  void clear_field_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& field_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_field_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_field_mask();
  void set_allocated_field_mask(PROTOBUF_NAMESPACE_ID::FieldMask* field_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_field_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_field_mask();
  public:

  // bool acceptExhaustion = 3;
  void clear_acceptexhaustion();
  bool acceptexhaustion() const;
  void set_acceptexhaustion(bool value);
  private:
  bool _internal_acceptexhaustion() const;
  void _internal_set_acceptexhaustion(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apikeyserver.RequestKey)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requester_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  PROTOBUF_NAMESPACE_ID::FieldMask* field_mask_;
  bool acceptexhaustion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apiKeyServer_2eproto;
};
// -------------------------------------------------------------------

class RequestServerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apikeyserver.RequestServerInfo) */ {
 public:
  RequestServerInfo();
  virtual ~RequestServerInfo();

  RequestServerInfo(const RequestServerInfo& from);
  RequestServerInfo(RequestServerInfo&& from) noexcept
    : RequestServerInfo() {
    *this = ::std::move(from);
  }

  inline RequestServerInfo& operator=(const RequestServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestServerInfo& operator=(RequestServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestServerInfo* internal_default_instance() {
    return reinterpret_cast<const RequestServerInfo*>(
               &_RequestServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestServerInfo& a, RequestServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestServerInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestServerInfo* New() const final {
    return CreateMaybeMessage<RequestServerInfo>(nullptr);
  }

  RequestServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestServerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestServerInfo& from);
  void MergeFrom(const RequestServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apikeyserver.RequestServerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apiKeyServer_2eproto);
    return ::descriptor_table_apiKeyServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequesterFieldNumber = 1,
    kFieldMaskFieldNumber = 2,
  };
  // string requester = 1;
  void clear_requester();
  const std::string& requester() const;
  void set_requester(const std::string& value);
  void set_requester(std::string&& value);
  void set_requester(const char* value);
  void set_requester(const char* value, size_t size);
  std::string* mutable_requester();
  std::string* release_requester();
  void set_allocated_requester(std::string* requester);
  private:
  const std::string& _internal_requester() const;
  void _internal_set_requester(const std::string& value);
  std::string* _internal_mutable_requester();
  public:

  // .google.protobuf.FieldMask field_mask = 2;
  bool has_field_mask() const;
  private:
  bool _internal_has_field_mask() const;
  public:
  void clear_field_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& field_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_field_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_field_mask();
  void set_allocated_field_mask(PROTOBUF_NAMESPACE_ID::FieldMask* field_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_field_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_field_mask();
  public:

  // @@protoc_insertion_point(class_scope:apikeyserver.RequestServerInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requester_;
  PROTOBUF_NAMESPACE_ID::FieldMask* field_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apiKeyServer_2eproto;
};
// -------------------------------------------------------------------

class GetKeyResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apikeyserver.GetKeyResponse) */ {
 public:
  GetKeyResponse();
  virtual ~GetKeyResponse();

  GetKeyResponse(const GetKeyResponse& from);
  GetKeyResponse(GetKeyResponse&& from) noexcept
    : GetKeyResponse() {
    *this = ::std::move(from);
  }

  inline GetKeyResponse& operator=(const GetKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetKeyResponse& operator=(GetKeyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetKeyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetKeyResponse* internal_default_instance() {
    return reinterpret_cast<const GetKeyResponse*>(
               &_GetKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetKeyResponse& a, GetKeyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetKeyResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetKeyResponse* New() const final {
    return CreateMaybeMessage<GetKeyResponse>(nullptr);
  }

  GetKeyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetKeyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetKeyResponse& from);
  void MergeFrom(const GetKeyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetKeyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apikeyserver.GetKeyResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apiKeyServer_2eproto);
    return ::descriptor_table_apiKeyServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 5,
    kKeyFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kTimeFieldNumber = 4,
    kExhaustedFieldNumber = 6,
  };
  // repeated .apikeyserver.KeyResponseRemaining items = 5;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::apikeyserver::KeyResponseRemaining* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apikeyserver::KeyResponseRemaining >*
      mutable_items();
  private:
  const ::apikeyserver::KeyResponseRemaining& _internal_items(int index) const;
  ::apikeyserver::KeyResponseRemaining* _internal_add_items();
  public:
  const ::apikeyserver::KeyResponseRemaining& items(int index) const;
  ::apikeyserver::KeyResponseRemaining* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apikeyserver::KeyResponseRemaining >&
      items() const;

  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int64 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool exhausted = 6;
  void clear_exhausted();
  bool exhausted() const;
  void set_exhausted(bool value);
  private:
  bool _internal_exhausted() const;
  void _internal_set_exhausted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apikeyserver.GetKeyResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apikeyserver::KeyResponseRemaining > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  bool exhausted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apiKeyServer_2eproto;
};
// -------------------------------------------------------------------

class KeyResponseRemaining :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apikeyserver.KeyResponseRemaining) */ {
 public:
  KeyResponseRemaining();
  virtual ~KeyResponseRemaining();

  KeyResponseRemaining(const KeyResponseRemaining& from);
  KeyResponseRemaining(KeyResponseRemaining&& from) noexcept
    : KeyResponseRemaining() {
    *this = ::std::move(from);
  }

  inline KeyResponseRemaining& operator=(const KeyResponseRemaining& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyResponseRemaining& operator=(KeyResponseRemaining&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyResponseRemaining& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyResponseRemaining* internal_default_instance() {
    return reinterpret_cast<const KeyResponseRemaining*>(
               &_KeyResponseRemaining_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(KeyResponseRemaining& a, KeyResponseRemaining& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyResponseRemaining* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyResponseRemaining* New() const final {
    return CreateMaybeMessage<KeyResponseRemaining>(nullptr);
  }

  KeyResponseRemaining* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyResponseRemaining>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyResponseRemaining& from);
  void MergeFrom(const KeyResponseRemaining& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyResponseRemaining* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apikeyserver.KeyResponseRemaining";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apiKeyServer_2eproto);
    return ::descriptor_table_apiKeyServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyResponseTypeNamesFieldNumber = 1,
    kTypeRemainingFieldNumber = 2,
  };
  // string KeyResponseTypeNames = 1;
  void clear_keyresponsetypenames();
  const std::string& keyresponsetypenames() const;
  void set_keyresponsetypenames(const std::string& value);
  void set_keyresponsetypenames(std::string&& value);
  void set_keyresponsetypenames(const char* value);
  void set_keyresponsetypenames(const char* value, size_t size);
  std::string* mutable_keyresponsetypenames();
  std::string* release_keyresponsetypenames();
  void set_allocated_keyresponsetypenames(std::string* keyresponsetypenames);
  private:
  const std::string& _internal_keyresponsetypenames() const;
  void _internal_set_keyresponsetypenames(const std::string& value);
  std::string* _internal_mutable_keyresponsetypenames();
  public:

  // uint32 typeRemaining = 2;
  void clear_typeremaining();
  ::PROTOBUF_NAMESPACE_ID::uint32 typeremaining() const;
  void set_typeremaining(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_typeremaining() const;
  void _internal_set_typeremaining(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apikeyserver.KeyResponseRemaining)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyresponsetypenames_;
  ::PROTOBUF_NAMESPACE_ID::uint32 typeremaining_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apiKeyServer_2eproto;
};
// -------------------------------------------------------------------

class KeyResponseTypeNames :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apikeyserver.KeyResponseTypeNames) */ {
 public:
  KeyResponseTypeNames();
  virtual ~KeyResponseTypeNames();

  KeyResponseTypeNames(const KeyResponseTypeNames& from);
  KeyResponseTypeNames(KeyResponseTypeNames&& from) noexcept
    : KeyResponseTypeNames() {
    *this = ::std::move(from);
  }

  inline KeyResponseTypeNames& operator=(const KeyResponseTypeNames& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyResponseTypeNames& operator=(KeyResponseTypeNames&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyResponseTypeNames& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyResponseTypeNames* internal_default_instance() {
    return reinterpret_cast<const KeyResponseTypeNames*>(
               &_KeyResponseTypeNames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(KeyResponseTypeNames& a, KeyResponseTypeNames& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyResponseTypeNames* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyResponseTypeNames* New() const final {
    return CreateMaybeMessage<KeyResponseTypeNames>(nullptr);
  }

  KeyResponseTypeNames* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyResponseTypeNames>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyResponseTypeNames& from);
  void MergeFrom(const KeyResponseTypeNames& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyResponseTypeNames* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apikeyserver.KeyResponseTypeNames";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apiKeyServer_2eproto);
    return ::descriptor_table_apiKeyServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeNameFieldNumber = 1,
  };
  // string typeName = 1;
  void clear_typename_();
  const std::string& typename_() const;
  void set_typename_(const std::string& value);
  void set_typename_(std::string&& value);
  void set_typename_(const char* value);
  void set_typename_(const char* value, size_t size);
  std::string* mutable_typename_();
  std::string* release_typename_();
  void set_allocated_typename_(std::string* typename_);
  private:
  const std::string& _internal_typename_() const;
  void _internal_set_typename_(const std::string& value);
  std::string* _internal_mutable_typename_();
  public:

  // @@protoc_insertion_point(class_scope:apikeyserver.KeyResponseTypeNames)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr typename__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apiKeyServer_2eproto;
};
// -------------------------------------------------------------------

class RequestKillKey :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apikeyserver.RequestKillKey) */ {
 public:
  RequestKillKey();
  virtual ~RequestKillKey();

  RequestKillKey(const RequestKillKey& from);
  RequestKillKey(RequestKillKey&& from) noexcept
    : RequestKillKey() {
    *this = ::std::move(from);
  }

  inline RequestKillKey& operator=(const RequestKillKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestKillKey& operator=(RequestKillKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestKillKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestKillKey* internal_default_instance() {
    return reinterpret_cast<const RequestKillKey*>(
               &_RequestKillKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RequestKillKey& a, RequestKillKey& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestKillKey* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestKillKey* New() const final {
    return CreateMaybeMessage<RequestKillKey>(nullptr);
  }

  RequestKillKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestKillKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestKillKey& from);
  void MergeFrom(const RequestKillKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestKillKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apikeyserver.RequestKillKey";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apiKeyServer_2eproto);
    return ::descriptor_table_apiKeyServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequesterFieldNumber = 1,
    kKeyFieldNumber = 2,
    kNameFieldNumber = 3,
    kTimeFieldNumber = 4,
  };
  // string requester = 1;
  void clear_requester();
  const std::string& requester() const;
  void set_requester(const std::string& value);
  void set_requester(std::string&& value);
  void set_requester(const char* value);
  void set_requester(const char* value, size_t size);
  std::string* mutable_requester();
  std::string* release_requester();
  void set_allocated_requester(std::string* requester);
  private:
  const std::string& _internal_requester() const;
  void _internal_set_requester(const std::string& value);
  std::string* _internal_mutable_requester();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:apikeyserver.RequestKillKey)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requester_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apiKeyServer_2eproto;
};
// -------------------------------------------------------------------

class RequestPermKillKey :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apikeyserver.RequestPermKillKey) */ {
 public:
  RequestPermKillKey();
  virtual ~RequestPermKillKey();

  RequestPermKillKey(const RequestPermKillKey& from);
  RequestPermKillKey(RequestPermKillKey&& from) noexcept
    : RequestPermKillKey() {
    *this = ::std::move(from);
  }

  inline RequestPermKillKey& operator=(const RequestPermKillKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestPermKillKey& operator=(RequestPermKillKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestPermKillKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestPermKillKey* internal_default_instance() {
    return reinterpret_cast<const RequestPermKillKey*>(
               &_RequestPermKillKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RequestPermKillKey& a, RequestPermKillKey& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestPermKillKey* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestPermKillKey* New() const final {
    return CreateMaybeMessage<RequestPermKillKey>(nullptr);
  }

  RequestPermKillKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestPermKillKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestPermKillKey& from);
  void MergeFrom(const RequestPermKillKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestPermKillKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apikeyserver.RequestPermKillKey";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apiKeyServer_2eproto);
    return ::descriptor_table_apiKeyServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequesterFieldNumber = 1,
    kKeyFieldNumber = 2,
    kNameFieldNumber = 3,
    kTimeFieldNumber = 4,
  };
  // string requester = 1;
  void clear_requester();
  const std::string& requester() const;
  void set_requester(const std::string& value);
  void set_requester(std::string&& value);
  void set_requester(const char* value);
  void set_requester(const char* value, size_t size);
  std::string* mutable_requester();
  std::string* release_requester();
  void set_allocated_requester(std::string* requester);
  private:
  const std::string& _internal_requester() const;
  void _internal_set_requester(const std::string& value);
  std::string* _internal_mutable_requester();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:apikeyserver.RequestPermKillKey)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requester_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apiKeyServer_2eproto;
};
// -------------------------------------------------------------------

class RequestTimedKillKey :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apikeyserver.RequestTimedKillKey) */ {
 public:
  RequestTimedKillKey();
  virtual ~RequestTimedKillKey();

  RequestTimedKillKey(const RequestTimedKillKey& from);
  RequestTimedKillKey(RequestTimedKillKey&& from) noexcept
    : RequestTimedKillKey() {
    *this = ::std::move(from);
  }

  inline RequestTimedKillKey& operator=(const RequestTimedKillKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestTimedKillKey& operator=(RequestTimedKillKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestTimedKillKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestTimedKillKey* internal_default_instance() {
    return reinterpret_cast<const RequestTimedKillKey*>(
               &_RequestTimedKillKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RequestTimedKillKey& a, RequestTimedKillKey& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestTimedKillKey* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestTimedKillKey* New() const final {
    return CreateMaybeMessage<RequestTimedKillKey>(nullptr);
  }

  RequestTimedKillKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestTimedKillKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestTimedKillKey& from);
  void MergeFrom(const RequestTimedKillKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestTimedKillKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apikeyserver.RequestTimedKillKey";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apiKeyServer_2eproto);
    return ::descriptor_table_apiKeyServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequesterFieldNumber = 1,
    kKeyFieldNumber = 2,
    kNameFieldNumber = 3,
    kTimeFieldNumber = 4,
    kReturnTimeFieldNumber = 5,
  };
  // string requester = 1;
  void clear_requester();
  const std::string& requester() const;
  void set_requester(const std::string& value);
  void set_requester(std::string&& value);
  void set_requester(const char* value);
  void set_requester(const char* value, size_t size);
  std::string* mutable_requester();
  std::string* release_requester();
  void set_allocated_requester(std::string* requester);
  private:
  const std::string& _internal_requester() const;
  void _internal_set_requester(const std::string& value);
  std::string* _internal_mutable_requester();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 returnTime = 5;
  void clear_returntime();
  ::PROTOBUF_NAMESPACE_ID::int64 returntime() const;
  void set_returntime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_returntime() const;
  void _internal_set_returntime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:apikeyserver.RequestTimedKillKey)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requester_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 returntime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apiKeyServer_2eproto;
};
// -------------------------------------------------------------------

class GenericKillResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apikeyserver.GenericKillResponse) */ {
 public:
  GenericKillResponse();
  virtual ~GenericKillResponse();

  GenericKillResponse(const GenericKillResponse& from);
  GenericKillResponse(GenericKillResponse&& from) noexcept
    : GenericKillResponse() {
    *this = ::std::move(from);
  }

  inline GenericKillResponse& operator=(const GenericKillResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericKillResponse& operator=(GenericKillResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenericKillResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenericKillResponse* internal_default_instance() {
    return reinterpret_cast<const GenericKillResponse*>(
               &_GenericKillResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GenericKillResponse& a, GenericKillResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericKillResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericKillResponse* New() const final {
    return CreateMaybeMessage<GenericKillResponse>(nullptr);
  }

  GenericKillResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericKillResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenericKillResponse& from);
  void MergeFrom(const GenericKillResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericKillResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apikeyserver.GenericKillResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apiKeyServer_2eproto);
    return ::descriptor_table_apiKeyServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // int64 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apikeyserver.GenericKillResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apiKeyServer_2eproto;
};
// -------------------------------------------------------------------

class TimedKillResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apikeyserver.TimedKillResponse) */ {
 public:
  TimedKillResponse();
  virtual ~TimedKillResponse();

  TimedKillResponse(const TimedKillResponse& from);
  TimedKillResponse(TimedKillResponse&& from) noexcept
    : TimedKillResponse() {
    *this = ::std::move(from);
  }

  inline TimedKillResponse& operator=(const TimedKillResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimedKillResponse& operator=(TimedKillResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimedKillResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimedKillResponse* internal_default_instance() {
    return reinterpret_cast<const TimedKillResponse*>(
               &_TimedKillResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TimedKillResponse& a, TimedKillResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TimedKillResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimedKillResponse* New() const final {
    return CreateMaybeMessage<TimedKillResponse>(nullptr);
  }

  TimedKillResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimedKillResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimedKillResponse& from);
  void MergeFrom(const TimedKillResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimedKillResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apikeyserver.TimedKillResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apiKeyServer_2eproto);
    return ::descriptor_table_apiKeyServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kReturnToServiceFieldNumber = 2,
  };
  // .apikeyserver.GenericKillResponse result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::apikeyserver::GenericKillResponse& result() const;
  ::apikeyserver::GenericKillResponse* release_result();
  ::apikeyserver::GenericKillResponse* mutable_result();
  void set_allocated_result(::apikeyserver::GenericKillResponse* result);
  private:
  const ::apikeyserver::GenericKillResponse& _internal_result() const;
  ::apikeyserver::GenericKillResponse* _internal_mutable_result();
  public:

  // int64 returnToService = 2;
  void clear_returntoservice();
  ::PROTOBUF_NAMESPACE_ID::int64 returntoservice() const;
  void set_returntoservice(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_returntoservice() const;
  void _internal_set_returntoservice(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:apikeyserver.TimedKillResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::apikeyserver::GenericKillResponse* result_;
  ::PROTOBUF_NAMESPACE_ID::int64 returntoservice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apiKeyServer_2eproto;
};
// -------------------------------------------------------------------

class GetServerInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apikeyserver.GetServerInfoResponse) */ {
 public:
  GetServerInfoResponse();
  virtual ~GetServerInfoResponse();

  GetServerInfoResponse(const GetServerInfoResponse& from);
  GetServerInfoResponse(GetServerInfoResponse&& from) noexcept
    : GetServerInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetServerInfoResponse& operator=(const GetServerInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServerInfoResponse& operator=(GetServerInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServerInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServerInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetServerInfoResponse*>(
               &_GetServerInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetServerInfoResponse& a, GetServerInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServerInfoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServerInfoResponse* New() const final {
    return CreateMaybeMessage<GetServerInfoResponse>(nullptr);
  }

  GetServerInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServerInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServerInfoResponse& from);
  void MergeFrom(const GetServerInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServerInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apikeyserver.GetServerInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apiKeyServer_2eproto);
    return ::descriptor_table_apiKeyServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 7,
    kServerVersionFieldNumber = 1,
    kKeyNamesPermaKilledFieldNumber = 6,
    kTotalAvailableUsesPerMinFieldNumber = 3,
    kTotalKeysServedFieldNumber = 4,
    kTotalKeysKilledFieldNumber = 5,
    kKeyExhaustionsFieldNumber = 2,
    kAvgKeysServedPerMinFieldNumber = 10,
    kTimeFieldNumber = 8,
    kUptimeFieldNumber = 9,
  };
  // repeated .apikeyserver.KeyDetailsResponse items = 7;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::apikeyserver::KeyDetailsResponse* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apikeyserver::KeyDetailsResponse >*
      mutable_items();
  private:
  const ::apikeyserver::KeyDetailsResponse& _internal_items(int index) const;
  ::apikeyserver::KeyDetailsResponse* _internal_add_items();
  public:
  const ::apikeyserver::KeyDetailsResponse& items(int index) const;
  ::apikeyserver::KeyDetailsResponse* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apikeyserver::KeyDetailsResponse >&
      items() const;

  // string serverVersion = 1;
  void clear_serverversion();
  const std::string& serverversion() const;
  void set_serverversion(const std::string& value);
  void set_serverversion(std::string&& value);
  void set_serverversion(const char* value);
  void set_serverversion(const char* value, size_t size);
  std::string* mutable_serverversion();
  std::string* release_serverversion();
  void set_allocated_serverversion(std::string* serverversion);
  private:
  const std::string& _internal_serverversion() const;
  void _internal_set_serverversion(const std::string& value);
  std::string* _internal_mutable_serverversion();
  public:

  // string keyNamesPermaKilled = 6;
  void clear_keynamespermakilled();
  const std::string& keynamespermakilled() const;
  void set_keynamespermakilled(const std::string& value);
  void set_keynamespermakilled(std::string&& value);
  void set_keynamespermakilled(const char* value);
  void set_keynamespermakilled(const char* value, size_t size);
  std::string* mutable_keynamespermakilled();
  std::string* release_keynamespermakilled();
  void set_allocated_keynamespermakilled(std::string* keynamespermakilled);
  private:
  const std::string& _internal_keynamespermakilled() const;
  void _internal_set_keynamespermakilled(const std::string& value);
  std::string* _internal_mutable_keynamespermakilled();
  public:

  // uint64 totalAvailableUsesPerMin = 3;
  void clear_totalavailableusespermin();
  ::PROTOBUF_NAMESPACE_ID::uint64 totalavailableusespermin() const;
  void set_totalavailableusespermin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_totalavailableusespermin() const;
  void _internal_set_totalavailableusespermin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 totalKeysServed = 4;
  void clear_totalkeysserved();
  ::PROTOBUF_NAMESPACE_ID::uint64 totalkeysserved() const;
  void set_totalkeysserved(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_totalkeysserved() const;
  void _internal_set_totalkeysserved(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 totalKeysKilled = 5;
  void clear_totalkeyskilled();
  ::PROTOBUF_NAMESPACE_ID::uint64 totalkeyskilled() const;
  void set_totalkeyskilled(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_totalkeyskilled() const;
  void _internal_set_totalkeyskilled(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 keyExhaustions = 2;
  void clear_keyexhaustions();
  ::PROTOBUF_NAMESPACE_ID::uint32 keyexhaustions() const;
  void set_keyexhaustions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_keyexhaustions() const;
  void _internal_set_keyexhaustions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float avgKeysServedPerMin = 10;
  void clear_avgkeysservedpermin();
  float avgkeysservedpermin() const;
  void set_avgkeysservedpermin(float value);
  private:
  float _internal_avgkeysservedpermin() const;
  void _internal_set_avgkeysservedpermin(float value);
  public:

  // int64 time = 8;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 uptime = 9;
  void clear_uptime();
  ::PROTOBUF_NAMESPACE_ID::int64 uptime() const;
  void set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uptime() const;
  void _internal_set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:apikeyserver.GetServerInfoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apikeyserver::KeyDetailsResponse > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keynamespermakilled_;
  ::PROTOBUF_NAMESPACE_ID::uint64 totalavailableusespermin_;
  ::PROTOBUF_NAMESPACE_ID::uint64 totalkeysserved_;
  ::PROTOBUF_NAMESPACE_ID::uint64 totalkeyskilled_;
  ::PROTOBUF_NAMESPACE_ID::uint32 keyexhaustions_;
  float avgkeysservedpermin_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 uptime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apiKeyServer_2eproto;
};
// -------------------------------------------------------------------

class KeyDetailsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apikeyserver.KeyDetailsResponse) */ {
 public:
  KeyDetailsResponse();
  virtual ~KeyDetailsResponse();

  KeyDetailsResponse(const KeyDetailsResponse& from);
  KeyDetailsResponse(KeyDetailsResponse&& from) noexcept
    : KeyDetailsResponse() {
    *this = ::std::move(from);
  }

  inline KeyDetailsResponse& operator=(const KeyDetailsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyDetailsResponse& operator=(KeyDetailsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyDetailsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyDetailsResponse* internal_default_instance() {
    return reinterpret_cast<const KeyDetailsResponse*>(
               &_KeyDetailsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(KeyDetailsResponse& a, KeyDetailsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyDetailsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyDetailsResponse* New() const final {
    return CreateMaybeMessage<KeyDetailsResponse>(nullptr);
  }

  KeyDetailsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyDetailsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyDetailsResponse& from);
  void MergeFrom(const KeyDetailsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyDetailsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apikeyserver.KeyDetailsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apiKeyServer_2eproto);
    return ::descriptor_table_apiKeyServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypesFieldNumber = 2,
    kUsesFieldNumber = 3,
    kKillsFieldNumber = 4,
    kActiveFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string types = 2;
  void clear_types();
  const std::string& types() const;
  void set_types(const std::string& value);
  void set_types(std::string&& value);
  void set_types(const char* value);
  void set_types(const char* value, size_t size);
  std::string* mutable_types();
  std::string* release_types();
  void set_allocated_types(std::string* types);
  private:
  const std::string& _internal_types() const;
  void _internal_set_types(const std::string& value);
  std::string* _internal_mutable_types();
  public:

  // uint32 uses = 3;
  void clear_uses();
  ::PROTOBUF_NAMESPACE_ID::uint32 uses() const;
  void set_uses(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uses() const;
  void _internal_set_uses(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 kills = 4;
  void clear_kills();
  ::PROTOBUF_NAMESPACE_ID::uint32 kills() const;
  void set_kills(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kills() const;
  void _internal_set_kills(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool active = 5;
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apikeyserver.KeyDetailsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr types_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uses_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kills_;
  bool active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apiKeyServer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestKey

// string requester = 1;
inline void RequestKey::clear_requester() {
  requester_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestKey::requester() const {
  // @@protoc_insertion_point(field_get:apikeyserver.RequestKey.requester)
  return _internal_requester();
}
inline void RequestKey::set_requester(const std::string& value) {
  _internal_set_requester(value);
  // @@protoc_insertion_point(field_set:apikeyserver.RequestKey.requester)
}
inline std::string* RequestKey::mutable_requester() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.RequestKey.requester)
  return _internal_mutable_requester();
}
inline const std::string& RequestKey::_internal_requester() const {
  return requester_.GetNoArena();
}
inline void RequestKey::_internal_set_requester(const std::string& value) {
  
  requester_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestKey::set_requester(std::string&& value) {
  
  requester_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apikeyserver.RequestKey.requester)
}
inline void RequestKey::set_requester(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requester_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apikeyserver.RequestKey.requester)
}
inline void RequestKey::set_requester(const char* value, size_t size) {
  
  requester_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apikeyserver.RequestKey.requester)
}
inline std::string* RequestKey::_internal_mutable_requester() {
  
  return requester_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestKey::release_requester() {
  // @@protoc_insertion_point(field_release:apikeyserver.RequestKey.requester)
  
  return requester_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestKey::set_allocated_requester(std::string* requester) {
  if (requester != nullptr) {
    
  } else {
    
  }
  requester_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requester);
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.RequestKey.requester)
}

// string type = 2;
inline void RequestKey::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestKey::type() const {
  // @@protoc_insertion_point(field_get:apikeyserver.RequestKey.type)
  return _internal_type();
}
inline void RequestKey::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apikeyserver.RequestKey.type)
}
inline std::string* RequestKey::mutable_type() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.RequestKey.type)
  return _internal_mutable_type();
}
inline const std::string& RequestKey::_internal_type() const {
  return type_.GetNoArena();
}
inline void RequestKey::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestKey::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apikeyserver.RequestKey.type)
}
inline void RequestKey::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apikeyserver.RequestKey.type)
}
inline void RequestKey::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apikeyserver.RequestKey.type)
}
inline std::string* RequestKey::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestKey::release_type() {
  // @@protoc_insertion_point(field_release:apikeyserver.RequestKey.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestKey::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.RequestKey.type)
}

// bool acceptExhaustion = 3;
inline void RequestKey::clear_acceptexhaustion() {
  acceptexhaustion_ = false;
}
inline bool RequestKey::_internal_acceptexhaustion() const {
  return acceptexhaustion_;
}
inline bool RequestKey::acceptexhaustion() const {
  // @@protoc_insertion_point(field_get:apikeyserver.RequestKey.acceptExhaustion)
  return _internal_acceptexhaustion();
}
inline void RequestKey::_internal_set_acceptexhaustion(bool value) {
  
  acceptexhaustion_ = value;
}
inline void RequestKey::set_acceptexhaustion(bool value) {
  _internal_set_acceptexhaustion(value);
  // @@protoc_insertion_point(field_set:apikeyserver.RequestKey.acceptExhaustion)
}

// .google.protobuf.FieldMask field_mask = 4;
inline bool RequestKey::_internal_has_field_mask() const {
  return this != internal_default_instance() && field_mask_ != nullptr;
}
inline bool RequestKey::has_field_mask() const {
  return _internal_has_field_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& RequestKey::_internal_field_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = field_mask_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask*>(
      &PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& RequestKey::field_mask() const {
  // @@protoc_insertion_point(field_get:apikeyserver.RequestKey.field_mask)
  return _internal_field_mask();
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* RequestKey::release_field_mask() {
  // @@protoc_insertion_point(field_release:apikeyserver.RequestKey.field_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = field_mask_;
  field_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* RequestKey::_internal_mutable_field_mask() {
  
  if (field_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaNoVirtual());
    field_mask_ = p;
  }
  return field_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* RequestKey::mutable_field_mask() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.RequestKey.field_mask)
  return _internal_mutable_field_mask();
}
inline void RequestKey::set_allocated_field_mask(PROTOBUF_NAMESPACE_ID::FieldMask* field_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(field_mask_);
  }
  if (field_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(field_mask)->GetArena();
    if (message_arena != submessage_arena) {
      field_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field_mask, submessage_arena);
    }
    
  } else {
    
  }
  field_mask_ = field_mask;
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.RequestKey.field_mask)
}

// -------------------------------------------------------------------

// RequestServerInfo

// string requester = 1;
inline void RequestServerInfo::clear_requester() {
  requester_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestServerInfo::requester() const {
  // @@protoc_insertion_point(field_get:apikeyserver.RequestServerInfo.requester)
  return _internal_requester();
}
inline void RequestServerInfo::set_requester(const std::string& value) {
  _internal_set_requester(value);
  // @@protoc_insertion_point(field_set:apikeyserver.RequestServerInfo.requester)
}
inline std::string* RequestServerInfo::mutable_requester() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.RequestServerInfo.requester)
  return _internal_mutable_requester();
}
inline const std::string& RequestServerInfo::_internal_requester() const {
  return requester_.GetNoArena();
}
inline void RequestServerInfo::_internal_set_requester(const std::string& value) {
  
  requester_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestServerInfo::set_requester(std::string&& value) {
  
  requester_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apikeyserver.RequestServerInfo.requester)
}
inline void RequestServerInfo::set_requester(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requester_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apikeyserver.RequestServerInfo.requester)
}
inline void RequestServerInfo::set_requester(const char* value, size_t size) {
  
  requester_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apikeyserver.RequestServerInfo.requester)
}
inline std::string* RequestServerInfo::_internal_mutable_requester() {
  
  return requester_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestServerInfo::release_requester() {
  // @@protoc_insertion_point(field_release:apikeyserver.RequestServerInfo.requester)
  
  return requester_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestServerInfo::set_allocated_requester(std::string* requester) {
  if (requester != nullptr) {
    
  } else {
    
  }
  requester_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requester);
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.RequestServerInfo.requester)
}

// .google.protobuf.FieldMask field_mask = 2;
inline bool RequestServerInfo::_internal_has_field_mask() const {
  return this != internal_default_instance() && field_mask_ != nullptr;
}
inline bool RequestServerInfo::has_field_mask() const {
  return _internal_has_field_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& RequestServerInfo::_internal_field_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = field_mask_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask*>(
      &PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& RequestServerInfo::field_mask() const {
  // @@protoc_insertion_point(field_get:apikeyserver.RequestServerInfo.field_mask)
  return _internal_field_mask();
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* RequestServerInfo::release_field_mask() {
  // @@protoc_insertion_point(field_release:apikeyserver.RequestServerInfo.field_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = field_mask_;
  field_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* RequestServerInfo::_internal_mutable_field_mask() {
  
  if (field_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaNoVirtual());
    field_mask_ = p;
  }
  return field_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* RequestServerInfo::mutable_field_mask() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.RequestServerInfo.field_mask)
  return _internal_mutable_field_mask();
}
inline void RequestServerInfo::set_allocated_field_mask(PROTOBUF_NAMESPACE_ID::FieldMask* field_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(field_mask_);
  }
  if (field_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(field_mask)->GetArena();
    if (message_arena != submessage_arena) {
      field_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field_mask, submessage_arena);
    }
    
  } else {
    
  }
  field_mask_ = field_mask;
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.RequestServerInfo.field_mask)
}

// -------------------------------------------------------------------

// GetKeyResponse

// string key = 1;
inline void GetKeyResponse::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetKeyResponse::key() const {
  // @@protoc_insertion_point(field_get:apikeyserver.GetKeyResponse.key)
  return _internal_key();
}
inline void GetKeyResponse::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:apikeyserver.GetKeyResponse.key)
}
inline std::string* GetKeyResponse::mutable_key() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.GetKeyResponse.key)
  return _internal_mutable_key();
}
inline const std::string& GetKeyResponse::_internal_key() const {
  return key_.GetNoArena();
}
inline void GetKeyResponse::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetKeyResponse::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apikeyserver.GetKeyResponse.key)
}
inline void GetKeyResponse::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apikeyserver.GetKeyResponse.key)
}
inline void GetKeyResponse::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apikeyserver.GetKeyResponse.key)
}
inline std::string* GetKeyResponse::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetKeyResponse::release_key() {
  // @@protoc_insertion_point(field_release:apikeyserver.GetKeyResponse.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetKeyResponse::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.GetKeyResponse.key)
}

// string name = 2;
inline void GetKeyResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetKeyResponse::name() const {
  // @@protoc_insertion_point(field_get:apikeyserver.GetKeyResponse.name)
  return _internal_name();
}
inline void GetKeyResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apikeyserver.GetKeyResponse.name)
}
inline std::string* GetKeyResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.GetKeyResponse.name)
  return _internal_mutable_name();
}
inline const std::string& GetKeyResponse::_internal_name() const {
  return name_.GetNoArena();
}
inline void GetKeyResponse::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetKeyResponse::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apikeyserver.GetKeyResponse.name)
}
inline void GetKeyResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apikeyserver.GetKeyResponse.name)
}
inline void GetKeyResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apikeyserver.GetKeyResponse.name)
}
inline std::string* GetKeyResponse::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetKeyResponse::release_name() {
  // @@protoc_insertion_point(field_release:apikeyserver.GetKeyResponse.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetKeyResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.GetKeyResponse.name)
}

// string type = 3;
inline void GetKeyResponse::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetKeyResponse::type() const {
  // @@protoc_insertion_point(field_get:apikeyserver.GetKeyResponse.type)
  return _internal_type();
}
inline void GetKeyResponse::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apikeyserver.GetKeyResponse.type)
}
inline std::string* GetKeyResponse::mutable_type() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.GetKeyResponse.type)
  return _internal_mutable_type();
}
inline const std::string& GetKeyResponse::_internal_type() const {
  return type_.GetNoArena();
}
inline void GetKeyResponse::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetKeyResponse::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apikeyserver.GetKeyResponse.type)
}
inline void GetKeyResponse::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apikeyserver.GetKeyResponse.type)
}
inline void GetKeyResponse::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apikeyserver.GetKeyResponse.type)
}
inline std::string* GetKeyResponse::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetKeyResponse::release_type() {
  // @@protoc_insertion_point(field_release:apikeyserver.GetKeyResponse.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetKeyResponse::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.GetKeyResponse.type)
}

// int64 time = 4;
inline void GetKeyResponse::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetKeyResponse::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetKeyResponse::time() const {
  // @@protoc_insertion_point(field_get:apikeyserver.GetKeyResponse.time)
  return _internal_time();
}
inline void GetKeyResponse::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void GetKeyResponse::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:apikeyserver.GetKeyResponse.time)
}

// repeated .apikeyserver.KeyResponseRemaining items = 5;
inline int GetKeyResponse::_internal_items_size() const {
  return items_.size();
}
inline int GetKeyResponse::items_size() const {
  return _internal_items_size();
}
inline void GetKeyResponse::clear_items() {
  items_.Clear();
}
inline ::apikeyserver::KeyResponseRemaining* GetKeyResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:apikeyserver.GetKeyResponse.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apikeyserver::KeyResponseRemaining >*
GetKeyResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:apikeyserver.GetKeyResponse.items)
  return &items_;
}
inline const ::apikeyserver::KeyResponseRemaining& GetKeyResponse::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::apikeyserver::KeyResponseRemaining& GetKeyResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:apikeyserver.GetKeyResponse.items)
  return _internal_items(index);
}
inline ::apikeyserver::KeyResponseRemaining* GetKeyResponse::_internal_add_items() {
  return items_.Add();
}
inline ::apikeyserver::KeyResponseRemaining* GetKeyResponse::add_items() {
  // @@protoc_insertion_point(field_add:apikeyserver.GetKeyResponse.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apikeyserver::KeyResponseRemaining >&
GetKeyResponse::items() const {
  // @@protoc_insertion_point(field_list:apikeyserver.GetKeyResponse.items)
  return items_;
}

// bool exhausted = 6;
inline void GetKeyResponse::clear_exhausted() {
  exhausted_ = false;
}
inline bool GetKeyResponse::_internal_exhausted() const {
  return exhausted_;
}
inline bool GetKeyResponse::exhausted() const {
  // @@protoc_insertion_point(field_get:apikeyserver.GetKeyResponse.exhausted)
  return _internal_exhausted();
}
inline void GetKeyResponse::_internal_set_exhausted(bool value) {
  
  exhausted_ = value;
}
inline void GetKeyResponse::set_exhausted(bool value) {
  _internal_set_exhausted(value);
  // @@protoc_insertion_point(field_set:apikeyserver.GetKeyResponse.exhausted)
}

// -------------------------------------------------------------------

// KeyResponseRemaining

// string KeyResponseTypeNames = 1;
inline void KeyResponseRemaining::clear_keyresponsetypenames() {
  keyresponsetypenames_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeyResponseRemaining::keyresponsetypenames() const {
  // @@protoc_insertion_point(field_get:apikeyserver.KeyResponseRemaining.KeyResponseTypeNames)
  return _internal_keyresponsetypenames();
}
inline void KeyResponseRemaining::set_keyresponsetypenames(const std::string& value) {
  _internal_set_keyresponsetypenames(value);
  // @@protoc_insertion_point(field_set:apikeyserver.KeyResponseRemaining.KeyResponseTypeNames)
}
inline std::string* KeyResponseRemaining::mutable_keyresponsetypenames() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.KeyResponseRemaining.KeyResponseTypeNames)
  return _internal_mutable_keyresponsetypenames();
}
inline const std::string& KeyResponseRemaining::_internal_keyresponsetypenames() const {
  return keyresponsetypenames_.GetNoArena();
}
inline void KeyResponseRemaining::_internal_set_keyresponsetypenames(const std::string& value) {
  
  keyresponsetypenames_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KeyResponseRemaining::set_keyresponsetypenames(std::string&& value) {
  
  keyresponsetypenames_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apikeyserver.KeyResponseRemaining.KeyResponseTypeNames)
}
inline void KeyResponseRemaining::set_keyresponsetypenames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keyresponsetypenames_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apikeyserver.KeyResponseRemaining.KeyResponseTypeNames)
}
inline void KeyResponseRemaining::set_keyresponsetypenames(const char* value, size_t size) {
  
  keyresponsetypenames_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apikeyserver.KeyResponseRemaining.KeyResponseTypeNames)
}
inline std::string* KeyResponseRemaining::_internal_mutable_keyresponsetypenames() {
  
  return keyresponsetypenames_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyResponseRemaining::release_keyresponsetypenames() {
  // @@protoc_insertion_point(field_release:apikeyserver.KeyResponseRemaining.KeyResponseTypeNames)
  
  return keyresponsetypenames_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyResponseRemaining::set_allocated_keyresponsetypenames(std::string* keyresponsetypenames) {
  if (keyresponsetypenames != nullptr) {
    
  } else {
    
  }
  keyresponsetypenames_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyresponsetypenames);
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.KeyResponseRemaining.KeyResponseTypeNames)
}

// uint32 typeRemaining = 2;
inline void KeyResponseRemaining::clear_typeremaining() {
  typeremaining_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeyResponseRemaining::_internal_typeremaining() const {
  return typeremaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeyResponseRemaining::typeremaining() const {
  // @@protoc_insertion_point(field_get:apikeyserver.KeyResponseRemaining.typeRemaining)
  return _internal_typeremaining();
}
inline void KeyResponseRemaining::_internal_set_typeremaining(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  typeremaining_ = value;
}
inline void KeyResponseRemaining::set_typeremaining(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_typeremaining(value);
  // @@protoc_insertion_point(field_set:apikeyserver.KeyResponseRemaining.typeRemaining)
}

// -------------------------------------------------------------------

// KeyResponseTypeNames

// string typeName = 1;
inline void KeyResponseTypeNames::clear_typename_() {
  typename__.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeyResponseTypeNames::typename_() const {
  // @@protoc_insertion_point(field_get:apikeyserver.KeyResponseTypeNames.typeName)
  return _internal_typename_();
}
inline void KeyResponseTypeNames::set_typename_(const std::string& value) {
  _internal_set_typename_(value);
  // @@protoc_insertion_point(field_set:apikeyserver.KeyResponseTypeNames.typeName)
}
inline std::string* KeyResponseTypeNames::mutable_typename_() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.KeyResponseTypeNames.typeName)
  return _internal_mutable_typename_();
}
inline const std::string& KeyResponseTypeNames::_internal_typename_() const {
  return typename__.GetNoArena();
}
inline void KeyResponseTypeNames::_internal_set_typename_(const std::string& value) {
  
  typename__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KeyResponseTypeNames::set_typename_(std::string&& value) {
  
  typename__.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apikeyserver.KeyResponseTypeNames.typeName)
}
inline void KeyResponseTypeNames::set_typename_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  typename__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apikeyserver.KeyResponseTypeNames.typeName)
}
inline void KeyResponseTypeNames::set_typename_(const char* value, size_t size) {
  
  typename__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apikeyserver.KeyResponseTypeNames.typeName)
}
inline std::string* KeyResponseTypeNames::_internal_mutable_typename_() {
  
  return typename__.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyResponseTypeNames::release_typename_() {
  // @@protoc_insertion_point(field_release:apikeyserver.KeyResponseTypeNames.typeName)
  
  return typename__.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyResponseTypeNames::set_allocated_typename_(std::string* typename_) {
  if (typename_ != nullptr) {
    
  } else {
    
  }
  typename__.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), typename_);
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.KeyResponseTypeNames.typeName)
}

// -------------------------------------------------------------------

// RequestKillKey

// string requester = 1;
inline void RequestKillKey::clear_requester() {
  requester_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestKillKey::requester() const {
  // @@protoc_insertion_point(field_get:apikeyserver.RequestKillKey.requester)
  return _internal_requester();
}
inline void RequestKillKey::set_requester(const std::string& value) {
  _internal_set_requester(value);
  // @@protoc_insertion_point(field_set:apikeyserver.RequestKillKey.requester)
}
inline std::string* RequestKillKey::mutable_requester() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.RequestKillKey.requester)
  return _internal_mutable_requester();
}
inline const std::string& RequestKillKey::_internal_requester() const {
  return requester_.GetNoArena();
}
inline void RequestKillKey::_internal_set_requester(const std::string& value) {
  
  requester_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestKillKey::set_requester(std::string&& value) {
  
  requester_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apikeyserver.RequestKillKey.requester)
}
inline void RequestKillKey::set_requester(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requester_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apikeyserver.RequestKillKey.requester)
}
inline void RequestKillKey::set_requester(const char* value, size_t size) {
  
  requester_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apikeyserver.RequestKillKey.requester)
}
inline std::string* RequestKillKey::_internal_mutable_requester() {
  
  return requester_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestKillKey::release_requester() {
  // @@protoc_insertion_point(field_release:apikeyserver.RequestKillKey.requester)
  
  return requester_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestKillKey::set_allocated_requester(std::string* requester) {
  if (requester != nullptr) {
    
  } else {
    
  }
  requester_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requester);
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.RequestKillKey.requester)
}

// string key = 2;
inline void RequestKillKey::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestKillKey::key() const {
  // @@protoc_insertion_point(field_get:apikeyserver.RequestKillKey.key)
  return _internal_key();
}
inline void RequestKillKey::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:apikeyserver.RequestKillKey.key)
}
inline std::string* RequestKillKey::mutable_key() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.RequestKillKey.key)
  return _internal_mutable_key();
}
inline const std::string& RequestKillKey::_internal_key() const {
  return key_.GetNoArena();
}
inline void RequestKillKey::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestKillKey::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apikeyserver.RequestKillKey.key)
}
inline void RequestKillKey::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apikeyserver.RequestKillKey.key)
}
inline void RequestKillKey::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apikeyserver.RequestKillKey.key)
}
inline std::string* RequestKillKey::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestKillKey::release_key() {
  // @@protoc_insertion_point(field_release:apikeyserver.RequestKillKey.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestKillKey::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.RequestKillKey.key)
}

// string name = 3;
inline void RequestKillKey::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestKillKey::name() const {
  // @@protoc_insertion_point(field_get:apikeyserver.RequestKillKey.name)
  return _internal_name();
}
inline void RequestKillKey::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apikeyserver.RequestKillKey.name)
}
inline std::string* RequestKillKey::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.RequestKillKey.name)
  return _internal_mutable_name();
}
inline const std::string& RequestKillKey::_internal_name() const {
  return name_.GetNoArena();
}
inline void RequestKillKey::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestKillKey::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apikeyserver.RequestKillKey.name)
}
inline void RequestKillKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apikeyserver.RequestKillKey.name)
}
inline void RequestKillKey::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apikeyserver.RequestKillKey.name)
}
inline std::string* RequestKillKey::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestKillKey::release_name() {
  // @@protoc_insertion_point(field_release:apikeyserver.RequestKillKey.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestKillKey::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.RequestKillKey.name)
}

// int64 time = 4;
inline void RequestKillKey::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestKillKey::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestKillKey::time() const {
  // @@protoc_insertion_point(field_get:apikeyserver.RequestKillKey.time)
  return _internal_time();
}
inline void RequestKillKey::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void RequestKillKey::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:apikeyserver.RequestKillKey.time)
}

// -------------------------------------------------------------------

// RequestPermKillKey

// string requester = 1;
inline void RequestPermKillKey::clear_requester() {
  requester_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestPermKillKey::requester() const {
  // @@protoc_insertion_point(field_get:apikeyserver.RequestPermKillKey.requester)
  return _internal_requester();
}
inline void RequestPermKillKey::set_requester(const std::string& value) {
  _internal_set_requester(value);
  // @@protoc_insertion_point(field_set:apikeyserver.RequestPermKillKey.requester)
}
inline std::string* RequestPermKillKey::mutable_requester() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.RequestPermKillKey.requester)
  return _internal_mutable_requester();
}
inline const std::string& RequestPermKillKey::_internal_requester() const {
  return requester_.GetNoArena();
}
inline void RequestPermKillKey::_internal_set_requester(const std::string& value) {
  
  requester_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestPermKillKey::set_requester(std::string&& value) {
  
  requester_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apikeyserver.RequestPermKillKey.requester)
}
inline void RequestPermKillKey::set_requester(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requester_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apikeyserver.RequestPermKillKey.requester)
}
inline void RequestPermKillKey::set_requester(const char* value, size_t size) {
  
  requester_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apikeyserver.RequestPermKillKey.requester)
}
inline std::string* RequestPermKillKey::_internal_mutable_requester() {
  
  return requester_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestPermKillKey::release_requester() {
  // @@protoc_insertion_point(field_release:apikeyserver.RequestPermKillKey.requester)
  
  return requester_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestPermKillKey::set_allocated_requester(std::string* requester) {
  if (requester != nullptr) {
    
  } else {
    
  }
  requester_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requester);
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.RequestPermKillKey.requester)
}

// string key = 2;
inline void RequestPermKillKey::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestPermKillKey::key() const {
  // @@protoc_insertion_point(field_get:apikeyserver.RequestPermKillKey.key)
  return _internal_key();
}
inline void RequestPermKillKey::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:apikeyserver.RequestPermKillKey.key)
}
inline std::string* RequestPermKillKey::mutable_key() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.RequestPermKillKey.key)
  return _internal_mutable_key();
}
inline const std::string& RequestPermKillKey::_internal_key() const {
  return key_.GetNoArena();
}
inline void RequestPermKillKey::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestPermKillKey::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apikeyserver.RequestPermKillKey.key)
}
inline void RequestPermKillKey::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apikeyserver.RequestPermKillKey.key)
}
inline void RequestPermKillKey::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apikeyserver.RequestPermKillKey.key)
}
inline std::string* RequestPermKillKey::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestPermKillKey::release_key() {
  // @@protoc_insertion_point(field_release:apikeyserver.RequestPermKillKey.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestPermKillKey::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.RequestPermKillKey.key)
}

// string name = 3;
inline void RequestPermKillKey::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestPermKillKey::name() const {
  // @@protoc_insertion_point(field_get:apikeyserver.RequestPermKillKey.name)
  return _internal_name();
}
inline void RequestPermKillKey::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apikeyserver.RequestPermKillKey.name)
}
inline std::string* RequestPermKillKey::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.RequestPermKillKey.name)
  return _internal_mutable_name();
}
inline const std::string& RequestPermKillKey::_internal_name() const {
  return name_.GetNoArena();
}
inline void RequestPermKillKey::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestPermKillKey::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apikeyserver.RequestPermKillKey.name)
}
inline void RequestPermKillKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apikeyserver.RequestPermKillKey.name)
}
inline void RequestPermKillKey::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apikeyserver.RequestPermKillKey.name)
}
inline std::string* RequestPermKillKey::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestPermKillKey::release_name() {
  // @@protoc_insertion_point(field_release:apikeyserver.RequestPermKillKey.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestPermKillKey::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.RequestPermKillKey.name)
}

// int64 time = 4;
inline void RequestPermKillKey::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestPermKillKey::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestPermKillKey::time() const {
  // @@protoc_insertion_point(field_get:apikeyserver.RequestPermKillKey.time)
  return _internal_time();
}
inline void RequestPermKillKey::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void RequestPermKillKey::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:apikeyserver.RequestPermKillKey.time)
}

// -------------------------------------------------------------------

// RequestTimedKillKey

// string requester = 1;
inline void RequestTimedKillKey::clear_requester() {
  requester_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestTimedKillKey::requester() const {
  // @@protoc_insertion_point(field_get:apikeyserver.RequestTimedKillKey.requester)
  return _internal_requester();
}
inline void RequestTimedKillKey::set_requester(const std::string& value) {
  _internal_set_requester(value);
  // @@protoc_insertion_point(field_set:apikeyserver.RequestTimedKillKey.requester)
}
inline std::string* RequestTimedKillKey::mutable_requester() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.RequestTimedKillKey.requester)
  return _internal_mutable_requester();
}
inline const std::string& RequestTimedKillKey::_internal_requester() const {
  return requester_.GetNoArena();
}
inline void RequestTimedKillKey::_internal_set_requester(const std::string& value) {
  
  requester_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestTimedKillKey::set_requester(std::string&& value) {
  
  requester_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apikeyserver.RequestTimedKillKey.requester)
}
inline void RequestTimedKillKey::set_requester(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requester_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apikeyserver.RequestTimedKillKey.requester)
}
inline void RequestTimedKillKey::set_requester(const char* value, size_t size) {
  
  requester_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apikeyserver.RequestTimedKillKey.requester)
}
inline std::string* RequestTimedKillKey::_internal_mutable_requester() {
  
  return requester_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestTimedKillKey::release_requester() {
  // @@protoc_insertion_point(field_release:apikeyserver.RequestTimedKillKey.requester)
  
  return requester_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestTimedKillKey::set_allocated_requester(std::string* requester) {
  if (requester != nullptr) {
    
  } else {
    
  }
  requester_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requester);
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.RequestTimedKillKey.requester)
}

// string key = 2;
inline void RequestTimedKillKey::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestTimedKillKey::key() const {
  // @@protoc_insertion_point(field_get:apikeyserver.RequestTimedKillKey.key)
  return _internal_key();
}
inline void RequestTimedKillKey::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:apikeyserver.RequestTimedKillKey.key)
}
inline std::string* RequestTimedKillKey::mutable_key() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.RequestTimedKillKey.key)
  return _internal_mutable_key();
}
inline const std::string& RequestTimedKillKey::_internal_key() const {
  return key_.GetNoArena();
}
inline void RequestTimedKillKey::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestTimedKillKey::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apikeyserver.RequestTimedKillKey.key)
}
inline void RequestTimedKillKey::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apikeyserver.RequestTimedKillKey.key)
}
inline void RequestTimedKillKey::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apikeyserver.RequestTimedKillKey.key)
}
inline std::string* RequestTimedKillKey::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestTimedKillKey::release_key() {
  // @@protoc_insertion_point(field_release:apikeyserver.RequestTimedKillKey.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestTimedKillKey::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.RequestTimedKillKey.key)
}

// string name = 3;
inline void RequestTimedKillKey::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestTimedKillKey::name() const {
  // @@protoc_insertion_point(field_get:apikeyserver.RequestTimedKillKey.name)
  return _internal_name();
}
inline void RequestTimedKillKey::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apikeyserver.RequestTimedKillKey.name)
}
inline std::string* RequestTimedKillKey::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.RequestTimedKillKey.name)
  return _internal_mutable_name();
}
inline const std::string& RequestTimedKillKey::_internal_name() const {
  return name_.GetNoArena();
}
inline void RequestTimedKillKey::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestTimedKillKey::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apikeyserver.RequestTimedKillKey.name)
}
inline void RequestTimedKillKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apikeyserver.RequestTimedKillKey.name)
}
inline void RequestTimedKillKey::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apikeyserver.RequestTimedKillKey.name)
}
inline std::string* RequestTimedKillKey::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestTimedKillKey::release_name() {
  // @@protoc_insertion_point(field_release:apikeyserver.RequestTimedKillKey.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestTimedKillKey::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.RequestTimedKillKey.name)
}

// int64 time = 4;
inline void RequestTimedKillKey::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestTimedKillKey::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestTimedKillKey::time() const {
  // @@protoc_insertion_point(field_get:apikeyserver.RequestTimedKillKey.time)
  return _internal_time();
}
inline void RequestTimedKillKey::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void RequestTimedKillKey::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:apikeyserver.RequestTimedKillKey.time)
}

// int64 returnTime = 5;
inline void RequestTimedKillKey::clear_returntime() {
  returntime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestTimedKillKey::_internal_returntime() const {
  return returntime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestTimedKillKey::returntime() const {
  // @@protoc_insertion_point(field_get:apikeyserver.RequestTimedKillKey.returnTime)
  return _internal_returntime();
}
inline void RequestTimedKillKey::_internal_set_returntime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  returntime_ = value;
}
inline void RequestTimedKillKey::set_returntime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_returntime(value);
  // @@protoc_insertion_point(field_set:apikeyserver.RequestTimedKillKey.returnTime)
}

// -------------------------------------------------------------------

// GenericKillResponse

// bool result = 1;
inline void GenericKillResponse::clear_result() {
  result_ = false;
}
inline bool GenericKillResponse::_internal_result() const {
  return result_;
}
inline bool GenericKillResponse::result() const {
  // @@protoc_insertion_point(field_get:apikeyserver.GenericKillResponse.result)
  return _internal_result();
}
inline void GenericKillResponse::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void GenericKillResponse::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:apikeyserver.GenericKillResponse.result)
}

// int64 time = 2;
inline void GenericKillResponse::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericKillResponse::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericKillResponse::time() const {
  // @@protoc_insertion_point(field_get:apikeyserver.GenericKillResponse.time)
  return _internal_time();
}
inline void GenericKillResponse::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void GenericKillResponse::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:apikeyserver.GenericKillResponse.time)
}

// -------------------------------------------------------------------

// TimedKillResponse

// .apikeyserver.GenericKillResponse result = 1;
inline bool TimedKillResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool TimedKillResponse::has_result() const {
  return _internal_has_result();
}
inline void TimedKillResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::apikeyserver::GenericKillResponse& TimedKillResponse::_internal_result() const {
  const ::apikeyserver::GenericKillResponse* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apikeyserver::GenericKillResponse*>(
      &::apikeyserver::_GenericKillResponse_default_instance_);
}
inline const ::apikeyserver::GenericKillResponse& TimedKillResponse::result() const {
  // @@protoc_insertion_point(field_get:apikeyserver.TimedKillResponse.result)
  return _internal_result();
}
inline ::apikeyserver::GenericKillResponse* TimedKillResponse::release_result() {
  // @@protoc_insertion_point(field_release:apikeyserver.TimedKillResponse.result)
  
  ::apikeyserver::GenericKillResponse* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::apikeyserver::GenericKillResponse* TimedKillResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::apikeyserver::GenericKillResponse>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::apikeyserver::GenericKillResponse* TimedKillResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.TimedKillResponse.result)
  return _internal_mutable_result();
}
inline void TimedKillResponse::set_allocated_result(::apikeyserver::GenericKillResponse* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.TimedKillResponse.result)
}

// int64 returnToService = 2;
inline void TimedKillResponse::clear_returntoservice() {
  returntoservice_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimedKillResponse::_internal_returntoservice() const {
  return returntoservice_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimedKillResponse::returntoservice() const {
  // @@protoc_insertion_point(field_get:apikeyserver.TimedKillResponse.returnToService)
  return _internal_returntoservice();
}
inline void TimedKillResponse::_internal_set_returntoservice(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  returntoservice_ = value;
}
inline void TimedKillResponse::set_returntoservice(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_returntoservice(value);
  // @@protoc_insertion_point(field_set:apikeyserver.TimedKillResponse.returnToService)
}

// -------------------------------------------------------------------

// GetServerInfoResponse

// string serverVersion = 1;
inline void GetServerInfoResponse::clear_serverversion() {
  serverversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetServerInfoResponse::serverversion() const {
  // @@protoc_insertion_point(field_get:apikeyserver.GetServerInfoResponse.serverVersion)
  return _internal_serverversion();
}
inline void GetServerInfoResponse::set_serverversion(const std::string& value) {
  _internal_set_serverversion(value);
  // @@protoc_insertion_point(field_set:apikeyserver.GetServerInfoResponse.serverVersion)
}
inline std::string* GetServerInfoResponse::mutable_serverversion() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.GetServerInfoResponse.serverVersion)
  return _internal_mutable_serverversion();
}
inline const std::string& GetServerInfoResponse::_internal_serverversion() const {
  return serverversion_.GetNoArena();
}
inline void GetServerInfoResponse::_internal_set_serverversion(const std::string& value) {
  
  serverversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetServerInfoResponse::set_serverversion(std::string&& value) {
  
  serverversion_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apikeyserver.GetServerInfoResponse.serverVersion)
}
inline void GetServerInfoResponse::set_serverversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serverversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apikeyserver.GetServerInfoResponse.serverVersion)
}
inline void GetServerInfoResponse::set_serverversion(const char* value, size_t size) {
  
  serverversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apikeyserver.GetServerInfoResponse.serverVersion)
}
inline std::string* GetServerInfoResponse::_internal_mutable_serverversion() {
  
  return serverversion_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetServerInfoResponse::release_serverversion() {
  // @@protoc_insertion_point(field_release:apikeyserver.GetServerInfoResponse.serverVersion)
  
  return serverversion_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetServerInfoResponse::set_allocated_serverversion(std::string* serverversion) {
  if (serverversion != nullptr) {
    
  } else {
    
  }
  serverversion_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverversion);
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.GetServerInfoResponse.serverVersion)
}

// uint32 keyExhaustions = 2;
inline void GetServerInfoResponse::clear_keyexhaustions() {
  keyexhaustions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetServerInfoResponse::_internal_keyexhaustions() const {
  return keyexhaustions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetServerInfoResponse::keyexhaustions() const {
  // @@protoc_insertion_point(field_get:apikeyserver.GetServerInfoResponse.keyExhaustions)
  return _internal_keyexhaustions();
}
inline void GetServerInfoResponse::_internal_set_keyexhaustions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  keyexhaustions_ = value;
}
inline void GetServerInfoResponse::set_keyexhaustions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_keyexhaustions(value);
  // @@protoc_insertion_point(field_set:apikeyserver.GetServerInfoResponse.keyExhaustions)
}

// uint64 totalAvailableUsesPerMin = 3;
inline void GetServerInfoResponse::clear_totalavailableusespermin() {
  totalavailableusespermin_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetServerInfoResponse::_internal_totalavailableusespermin() const {
  return totalavailableusespermin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetServerInfoResponse::totalavailableusespermin() const {
  // @@protoc_insertion_point(field_get:apikeyserver.GetServerInfoResponse.totalAvailableUsesPerMin)
  return _internal_totalavailableusespermin();
}
inline void GetServerInfoResponse::_internal_set_totalavailableusespermin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  totalavailableusespermin_ = value;
}
inline void GetServerInfoResponse::set_totalavailableusespermin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_totalavailableusespermin(value);
  // @@protoc_insertion_point(field_set:apikeyserver.GetServerInfoResponse.totalAvailableUsesPerMin)
}

// uint64 totalKeysServed = 4;
inline void GetServerInfoResponse::clear_totalkeysserved() {
  totalkeysserved_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetServerInfoResponse::_internal_totalkeysserved() const {
  return totalkeysserved_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetServerInfoResponse::totalkeysserved() const {
  // @@protoc_insertion_point(field_get:apikeyserver.GetServerInfoResponse.totalKeysServed)
  return _internal_totalkeysserved();
}
inline void GetServerInfoResponse::_internal_set_totalkeysserved(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  totalkeysserved_ = value;
}
inline void GetServerInfoResponse::set_totalkeysserved(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_totalkeysserved(value);
  // @@protoc_insertion_point(field_set:apikeyserver.GetServerInfoResponse.totalKeysServed)
}

// uint64 totalKeysKilled = 5;
inline void GetServerInfoResponse::clear_totalkeyskilled() {
  totalkeyskilled_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetServerInfoResponse::_internal_totalkeyskilled() const {
  return totalkeyskilled_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetServerInfoResponse::totalkeyskilled() const {
  // @@protoc_insertion_point(field_get:apikeyserver.GetServerInfoResponse.totalKeysKilled)
  return _internal_totalkeyskilled();
}
inline void GetServerInfoResponse::_internal_set_totalkeyskilled(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  totalkeyskilled_ = value;
}
inline void GetServerInfoResponse::set_totalkeyskilled(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_totalkeyskilled(value);
  // @@protoc_insertion_point(field_set:apikeyserver.GetServerInfoResponse.totalKeysKilled)
}

// string keyNamesPermaKilled = 6;
inline void GetServerInfoResponse::clear_keynamespermakilled() {
  keynamespermakilled_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetServerInfoResponse::keynamespermakilled() const {
  // @@protoc_insertion_point(field_get:apikeyserver.GetServerInfoResponse.keyNamesPermaKilled)
  return _internal_keynamespermakilled();
}
inline void GetServerInfoResponse::set_keynamespermakilled(const std::string& value) {
  _internal_set_keynamespermakilled(value);
  // @@protoc_insertion_point(field_set:apikeyserver.GetServerInfoResponse.keyNamesPermaKilled)
}
inline std::string* GetServerInfoResponse::mutable_keynamespermakilled() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.GetServerInfoResponse.keyNamesPermaKilled)
  return _internal_mutable_keynamespermakilled();
}
inline const std::string& GetServerInfoResponse::_internal_keynamespermakilled() const {
  return keynamespermakilled_.GetNoArena();
}
inline void GetServerInfoResponse::_internal_set_keynamespermakilled(const std::string& value) {
  
  keynamespermakilled_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetServerInfoResponse::set_keynamespermakilled(std::string&& value) {
  
  keynamespermakilled_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apikeyserver.GetServerInfoResponse.keyNamesPermaKilled)
}
inline void GetServerInfoResponse::set_keynamespermakilled(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keynamespermakilled_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apikeyserver.GetServerInfoResponse.keyNamesPermaKilled)
}
inline void GetServerInfoResponse::set_keynamespermakilled(const char* value, size_t size) {
  
  keynamespermakilled_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apikeyserver.GetServerInfoResponse.keyNamesPermaKilled)
}
inline std::string* GetServerInfoResponse::_internal_mutable_keynamespermakilled() {
  
  return keynamespermakilled_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetServerInfoResponse::release_keynamespermakilled() {
  // @@protoc_insertion_point(field_release:apikeyserver.GetServerInfoResponse.keyNamesPermaKilled)
  
  return keynamespermakilled_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetServerInfoResponse::set_allocated_keynamespermakilled(std::string* keynamespermakilled) {
  if (keynamespermakilled != nullptr) {
    
  } else {
    
  }
  keynamespermakilled_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keynamespermakilled);
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.GetServerInfoResponse.keyNamesPermaKilled)
}

// repeated .apikeyserver.KeyDetailsResponse items = 7;
inline int GetServerInfoResponse::_internal_items_size() const {
  return items_.size();
}
inline int GetServerInfoResponse::items_size() const {
  return _internal_items_size();
}
inline void GetServerInfoResponse::clear_items() {
  items_.Clear();
}
inline ::apikeyserver::KeyDetailsResponse* GetServerInfoResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:apikeyserver.GetServerInfoResponse.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apikeyserver::KeyDetailsResponse >*
GetServerInfoResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:apikeyserver.GetServerInfoResponse.items)
  return &items_;
}
inline const ::apikeyserver::KeyDetailsResponse& GetServerInfoResponse::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::apikeyserver::KeyDetailsResponse& GetServerInfoResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:apikeyserver.GetServerInfoResponse.items)
  return _internal_items(index);
}
inline ::apikeyserver::KeyDetailsResponse* GetServerInfoResponse::_internal_add_items() {
  return items_.Add();
}
inline ::apikeyserver::KeyDetailsResponse* GetServerInfoResponse::add_items() {
  // @@protoc_insertion_point(field_add:apikeyserver.GetServerInfoResponse.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apikeyserver::KeyDetailsResponse >&
GetServerInfoResponse::items() const {
  // @@protoc_insertion_point(field_list:apikeyserver.GetServerInfoResponse.items)
  return items_;
}

// int64 time = 8;
inline void GetServerInfoResponse::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServerInfoResponse::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServerInfoResponse::time() const {
  // @@protoc_insertion_point(field_get:apikeyserver.GetServerInfoResponse.time)
  return _internal_time();
}
inline void GetServerInfoResponse::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void GetServerInfoResponse::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:apikeyserver.GetServerInfoResponse.time)
}

// int64 uptime = 9;
inline void GetServerInfoResponse::clear_uptime() {
  uptime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServerInfoResponse::_internal_uptime() const {
  return uptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServerInfoResponse::uptime() const {
  // @@protoc_insertion_point(field_get:apikeyserver.GetServerInfoResponse.uptime)
  return _internal_uptime();
}
inline void GetServerInfoResponse::_internal_set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uptime_ = value;
}
inline void GetServerInfoResponse::set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uptime(value);
  // @@protoc_insertion_point(field_set:apikeyserver.GetServerInfoResponse.uptime)
}

// float avgKeysServedPerMin = 10;
inline void GetServerInfoResponse::clear_avgkeysservedpermin() {
  avgkeysservedpermin_ = 0;
}
inline float GetServerInfoResponse::_internal_avgkeysservedpermin() const {
  return avgkeysservedpermin_;
}
inline float GetServerInfoResponse::avgkeysservedpermin() const {
  // @@protoc_insertion_point(field_get:apikeyserver.GetServerInfoResponse.avgKeysServedPerMin)
  return _internal_avgkeysservedpermin();
}
inline void GetServerInfoResponse::_internal_set_avgkeysservedpermin(float value) {
  
  avgkeysservedpermin_ = value;
}
inline void GetServerInfoResponse::set_avgkeysservedpermin(float value) {
  _internal_set_avgkeysservedpermin(value);
  // @@protoc_insertion_point(field_set:apikeyserver.GetServerInfoResponse.avgKeysServedPerMin)
}

// -------------------------------------------------------------------

// KeyDetailsResponse

// string name = 1;
inline void KeyDetailsResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeyDetailsResponse::name() const {
  // @@protoc_insertion_point(field_get:apikeyserver.KeyDetailsResponse.name)
  return _internal_name();
}
inline void KeyDetailsResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apikeyserver.KeyDetailsResponse.name)
}
inline std::string* KeyDetailsResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.KeyDetailsResponse.name)
  return _internal_mutable_name();
}
inline const std::string& KeyDetailsResponse::_internal_name() const {
  return name_.GetNoArena();
}
inline void KeyDetailsResponse::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KeyDetailsResponse::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apikeyserver.KeyDetailsResponse.name)
}
inline void KeyDetailsResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apikeyserver.KeyDetailsResponse.name)
}
inline void KeyDetailsResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apikeyserver.KeyDetailsResponse.name)
}
inline std::string* KeyDetailsResponse::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyDetailsResponse::release_name() {
  // @@protoc_insertion_point(field_release:apikeyserver.KeyDetailsResponse.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyDetailsResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.KeyDetailsResponse.name)
}

// string types = 2;
inline void KeyDetailsResponse::clear_types() {
  types_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeyDetailsResponse::types() const {
  // @@protoc_insertion_point(field_get:apikeyserver.KeyDetailsResponse.types)
  return _internal_types();
}
inline void KeyDetailsResponse::set_types(const std::string& value) {
  _internal_set_types(value);
  // @@protoc_insertion_point(field_set:apikeyserver.KeyDetailsResponse.types)
}
inline std::string* KeyDetailsResponse::mutable_types() {
  // @@protoc_insertion_point(field_mutable:apikeyserver.KeyDetailsResponse.types)
  return _internal_mutable_types();
}
inline const std::string& KeyDetailsResponse::_internal_types() const {
  return types_.GetNoArena();
}
inline void KeyDetailsResponse::_internal_set_types(const std::string& value) {
  
  types_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KeyDetailsResponse::set_types(std::string&& value) {
  
  types_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apikeyserver.KeyDetailsResponse.types)
}
inline void KeyDetailsResponse::set_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  types_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apikeyserver.KeyDetailsResponse.types)
}
inline void KeyDetailsResponse::set_types(const char* value, size_t size) {
  
  types_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apikeyserver.KeyDetailsResponse.types)
}
inline std::string* KeyDetailsResponse::_internal_mutable_types() {
  
  return types_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyDetailsResponse::release_types() {
  // @@protoc_insertion_point(field_release:apikeyserver.KeyDetailsResponse.types)
  
  return types_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyDetailsResponse::set_allocated_types(std::string* types) {
  if (types != nullptr) {
    
  } else {
    
  }
  types_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), types);
  // @@protoc_insertion_point(field_set_allocated:apikeyserver.KeyDetailsResponse.types)
}

// uint32 uses = 3;
inline void KeyDetailsResponse::clear_uses() {
  uses_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeyDetailsResponse::_internal_uses() const {
  return uses_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeyDetailsResponse::uses() const {
  // @@protoc_insertion_point(field_get:apikeyserver.KeyDetailsResponse.uses)
  return _internal_uses();
}
inline void KeyDetailsResponse::_internal_set_uses(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uses_ = value;
}
inline void KeyDetailsResponse::set_uses(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uses(value);
  // @@protoc_insertion_point(field_set:apikeyserver.KeyDetailsResponse.uses)
}

// uint32 kills = 4;
inline void KeyDetailsResponse::clear_kills() {
  kills_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeyDetailsResponse::_internal_kills() const {
  return kills_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeyDetailsResponse::kills() const {
  // @@protoc_insertion_point(field_get:apikeyserver.KeyDetailsResponse.kills)
  return _internal_kills();
}
inline void KeyDetailsResponse::_internal_set_kills(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  kills_ = value;
}
inline void KeyDetailsResponse::set_kills(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:apikeyserver.KeyDetailsResponse.kills)
}

// bool active = 5;
inline void KeyDetailsResponse::clear_active() {
  active_ = false;
}
inline bool KeyDetailsResponse::_internal_active() const {
  return active_;
}
inline bool KeyDetailsResponse::active() const {
  // @@protoc_insertion_point(field_get:apikeyserver.KeyDetailsResponse.active)
  return _internal_active();
}
inline void KeyDetailsResponse::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void KeyDetailsResponse::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:apikeyserver.KeyDetailsResponse.active)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace apikeyserver

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_apiKeyServer_2eproto
