// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apiKeyServer.proto

#include "apiKeyServer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_apiKeyServer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericKillResponse_apiKeyServer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_apiKeyServer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyDetailsResponse_apiKeyServer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_apiKeyServer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyResponseRemaining_apiKeyServer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ffield_5fmask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto;
namespace apikeyserver {
class RequestKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestKey> _instance;
} _RequestKey_default_instance_;
class RequestServerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestServerInfo> _instance;
} _RequestServerInfo_default_instance_;
class GetKeyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetKeyResponse> _instance;
} _GetKeyResponse_default_instance_;
class KeyResponseRemainingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyResponseRemaining> _instance;
} _KeyResponseRemaining_default_instance_;
class KeyResponseTypeNamesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyResponseTypeNames> _instance;
} _KeyResponseTypeNames_default_instance_;
class RequestKillKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestKillKey> _instance;
} _RequestKillKey_default_instance_;
class RequestPermKillKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestPermKillKey> _instance;
} _RequestPermKillKey_default_instance_;
class RequestTimedKillKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestTimedKillKey> _instance;
} _RequestTimedKillKey_default_instance_;
class GenericKillResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericKillResponse> _instance;
} _GenericKillResponse_default_instance_;
class TimedKillResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimedKillResponse> _instance;
} _TimedKillResponse_default_instance_;
class GetServerInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServerInfoResponse> _instance;
} _GetServerInfoResponse_default_instance_;
class KeyDetailsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyDetailsResponse> _instance;
} _KeyDetailsResponse_default_instance_;
}  // namespace apikeyserver
static void InitDefaultsscc_info_GenericKillResponse_apiKeyServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apikeyserver::_GenericKillResponse_default_instance_;
    new (ptr) ::apikeyserver::GenericKillResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apikeyserver::GenericKillResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericKillResponse_apiKeyServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenericKillResponse_apiKeyServer_2eproto}, {}};

static void InitDefaultsscc_info_GetKeyResponse_apiKeyServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apikeyserver::_GetKeyResponse_default_instance_;
    new (ptr) ::apikeyserver::GetKeyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apikeyserver::GetKeyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetKeyResponse_apiKeyServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetKeyResponse_apiKeyServer_2eproto}, {
      &scc_info_KeyResponseRemaining_apiKeyServer_2eproto.base,}};

static void InitDefaultsscc_info_GetServerInfoResponse_apiKeyServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apikeyserver::_GetServerInfoResponse_default_instance_;
    new (ptr) ::apikeyserver::GetServerInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apikeyserver::GetServerInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetServerInfoResponse_apiKeyServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetServerInfoResponse_apiKeyServer_2eproto}, {
      &scc_info_KeyDetailsResponse_apiKeyServer_2eproto.base,}};

static void InitDefaultsscc_info_KeyDetailsResponse_apiKeyServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apikeyserver::_KeyDetailsResponse_default_instance_;
    new (ptr) ::apikeyserver::KeyDetailsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apikeyserver::KeyDetailsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyDetailsResponse_apiKeyServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyDetailsResponse_apiKeyServer_2eproto}, {}};

static void InitDefaultsscc_info_KeyResponseRemaining_apiKeyServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apikeyserver::_KeyResponseRemaining_default_instance_;
    new (ptr) ::apikeyserver::KeyResponseRemaining();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apikeyserver::KeyResponseRemaining::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyResponseRemaining_apiKeyServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyResponseRemaining_apiKeyServer_2eproto}, {}};

static void InitDefaultsscc_info_KeyResponseTypeNames_apiKeyServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apikeyserver::_KeyResponseTypeNames_default_instance_;
    new (ptr) ::apikeyserver::KeyResponseTypeNames();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apikeyserver::KeyResponseTypeNames::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyResponseTypeNames_apiKeyServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyResponseTypeNames_apiKeyServer_2eproto}, {}};

static void InitDefaultsscc_info_RequestKey_apiKeyServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apikeyserver::_RequestKey_default_instance_;
    new (ptr) ::apikeyserver::RequestKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apikeyserver::RequestKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestKey_apiKeyServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RequestKey_apiKeyServer_2eproto}, {
      &scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto.base,}};

static void InitDefaultsscc_info_RequestKillKey_apiKeyServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apikeyserver::_RequestKillKey_default_instance_;
    new (ptr) ::apikeyserver::RequestKillKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apikeyserver::RequestKillKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestKillKey_apiKeyServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestKillKey_apiKeyServer_2eproto}, {}};

static void InitDefaultsscc_info_RequestPermKillKey_apiKeyServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apikeyserver::_RequestPermKillKey_default_instance_;
    new (ptr) ::apikeyserver::RequestPermKillKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apikeyserver::RequestPermKillKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestPermKillKey_apiKeyServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestPermKillKey_apiKeyServer_2eproto}, {}};

static void InitDefaultsscc_info_RequestServerInfo_apiKeyServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apikeyserver::_RequestServerInfo_default_instance_;
    new (ptr) ::apikeyserver::RequestServerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apikeyserver::RequestServerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestServerInfo_apiKeyServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RequestServerInfo_apiKeyServer_2eproto}, {
      &scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto.base,}};

static void InitDefaultsscc_info_RequestTimedKillKey_apiKeyServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apikeyserver::_RequestTimedKillKey_default_instance_;
    new (ptr) ::apikeyserver::RequestTimedKillKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apikeyserver::RequestTimedKillKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestTimedKillKey_apiKeyServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestTimedKillKey_apiKeyServer_2eproto}, {}};

static void InitDefaultsscc_info_TimedKillResponse_apiKeyServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apikeyserver::_TimedKillResponse_default_instance_;
    new (ptr) ::apikeyserver::TimedKillResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apikeyserver::TimedKillResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimedKillResponse_apiKeyServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TimedKillResponse_apiKeyServer_2eproto}, {
      &scc_info_GenericKillResponse_apiKeyServer_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_apiKeyServer_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_apiKeyServer_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_apiKeyServer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_apiKeyServer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestKey, requester_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestKey, type_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestKey, acceptexhaustion_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestKey, field_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestServerInfo, requester_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestServerInfo, field_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::GetKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::GetKeyResponse, key_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::GetKeyResponse, name_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::GetKeyResponse, type_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::GetKeyResponse, time_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::GetKeyResponse, items_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::GetKeyResponse, exhausted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::KeyResponseRemaining, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::KeyResponseRemaining, keyresponsetypenames_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::KeyResponseRemaining, typeremaining_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::KeyResponseTypeNames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::KeyResponseTypeNames, typename__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestKillKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestKillKey, requester_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestKillKey, key_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestKillKey, name_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestKillKey, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestPermKillKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestPermKillKey, requester_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestPermKillKey, key_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestPermKillKey, name_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestPermKillKey, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestTimedKillKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestTimedKillKey, requester_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestTimedKillKey, key_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestTimedKillKey, name_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestTimedKillKey, time_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::RequestTimedKillKey, returntime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::GenericKillResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::GenericKillResponse, result_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::GenericKillResponse, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::TimedKillResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::TimedKillResponse, result_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::TimedKillResponse, returntoservice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::GetServerInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::GetServerInfoResponse, serverversion_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::GetServerInfoResponse, keyexhaustions_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::GetServerInfoResponse, totalavailableusespermin_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::GetServerInfoResponse, totalkeysserved_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::GetServerInfoResponse, totalkeyskilled_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::GetServerInfoResponse, keynamespermakilled_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::GetServerInfoResponse, items_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::GetServerInfoResponse, time_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::GetServerInfoResponse, uptime_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::GetServerInfoResponse, avgkeysservedpermin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::KeyDetailsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apikeyserver::KeyDetailsResponse, name_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::KeyDetailsResponse, types_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::KeyDetailsResponse, uses_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::KeyDetailsResponse, kills_),
  PROTOBUF_FIELD_OFFSET(::apikeyserver::KeyDetailsResponse, active_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::apikeyserver::RequestKey)},
  { 9, -1, sizeof(::apikeyserver::RequestServerInfo)},
  { 16, -1, sizeof(::apikeyserver::GetKeyResponse)},
  { 27, -1, sizeof(::apikeyserver::KeyResponseRemaining)},
  { 34, -1, sizeof(::apikeyserver::KeyResponseTypeNames)},
  { 40, -1, sizeof(::apikeyserver::RequestKillKey)},
  { 49, -1, sizeof(::apikeyserver::RequestPermKillKey)},
  { 58, -1, sizeof(::apikeyserver::RequestTimedKillKey)},
  { 68, -1, sizeof(::apikeyserver::GenericKillResponse)},
  { 75, -1, sizeof(::apikeyserver::TimedKillResponse)},
  { 82, -1, sizeof(::apikeyserver::GetServerInfoResponse)},
  { 97, -1, sizeof(::apikeyserver::KeyDetailsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apikeyserver::_RequestKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apikeyserver::_RequestServerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apikeyserver::_GetKeyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apikeyserver::_KeyResponseRemaining_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apikeyserver::_KeyResponseTypeNames_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apikeyserver::_RequestKillKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apikeyserver::_RequestPermKillKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apikeyserver::_RequestTimedKillKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apikeyserver::_GenericKillResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apikeyserver::_TimedKillResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apikeyserver::_GetServerInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apikeyserver::_KeyDetailsResponse_default_instance_),
};

const char descriptor_table_protodef_apiKeyServer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022apiKeyServer.proto\022\014apikeyserver\032 goog"
  "le/protobuf/field_mask.proto\"w\n\nRequestK"
  "ey\022\021\n\trequester\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\030\n\020a"
  "cceptExhaustion\030\003 \001(\010\022.\n\nfield_mask\030\004 \001("
  "\0132\032.google.protobuf.FieldMask\"V\n\021Request"
  "ServerInfo\022\021\n\trequester\030\001 \001(\t\022.\n\nfield_m"
  "ask\030\002 \001(\0132\032.google.protobuf.FieldMask\"\215\001"
  "\n\016GetKeyResponse\022\013\n\003key\030\001 \001(\t\022\014\n\004name\030\002 "
  "\001(\t\022\014\n\004type\030\003 \001(\t\022\014\n\004time\030\004 \001(\003\0221\n\005items"
  "\030\005 \003(\0132\".apikeyserver.KeyResponseRemaini"
  "ng\022\021\n\texhausted\030\006 \001(\010\"K\n\024KeyResponseRema"
  "ining\022\034\n\024KeyResponseTypeNames\030\001 \001(\t\022\025\n\rt"
  "ypeRemaining\030\002 \001(\r\"(\n\024KeyResponseTypeNam"
  "es\022\020\n\010typeName\030\001 \001(\t\"L\n\016RequestKillKey\022\021"
  "\n\trequester\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\022\014\n\004name\030\003"
  " \001(\t\022\014\n\004time\030\004 \001(\003\"P\n\022RequestPermKillKey"
  "\022\021\n\trequester\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\022\014\n\004name"
  "\030\003 \001(\t\022\014\n\004time\030\004 \001(\003\"e\n\023RequestTimedKill"
  "Key\022\021\n\trequester\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\022\014\n\004n"
  "ame\030\003 \001(\t\022\014\n\004time\030\004 \001(\003\022\022\n\nreturnTime\030\005 "
  "\001(\003\"3\n\023GenericKillResponse\022\016\n\006result\030\001 \001"
  "(\010\022\014\n\004time\030\002 \001(\003\"_\n\021TimedKillResponse\0221\n"
  "\006result\030\001 \001(\0132!.apikeyserver.GenericKill"
  "Response\022\027\n\017returnToService\030\002 \001(\003\"\243\002\n\025Ge"
  "tServerInfoResponse\022\025\n\rserverVersion\030\001 \001"
  "(\t\022\026\n\016keyExhaustions\030\002 \001(\r\022 \n\030totalAvail"
  "ableUsesPerMin\030\003 \001(\004\022\027\n\017totalKeysServed\030"
  "\004 \001(\004\022\027\n\017totalKeysKilled\030\005 \001(\004\022\033\n\023keyNam"
  "esPermaKilled\030\006 \001(\t\022/\n\005items\030\007 \003(\0132 .api"
  "keyserver.KeyDetailsResponse\022\014\n\004time\030\010 \001"
  "(\003\022\016\n\006uptime\030\t \001(\003\022\033\n\023avgKeysServedPerMi"
  "n\030\n \001(\002\"^\n\022KeyDetailsResponse\022\014\n\004name\030\001 "
  "\001(\t\022\r\n\005types\030\002 \001(\t\022\014\n\004uses\030\003 \001(\r\022\r\n\005kill"
  "s\030\004 \001(\r\022\016\n\006active\030\005 \001(\0102\317\002\n\014ApiKeyServer"
  "\022B\n\006GetKey\022\030.apikeyserver.RequestKey\032\034.a"
  "pikeyserver.GetKeyResponse\"\000\022L\n\007KillKey\022"
  "\034.apikeyserver.RequestKillKey\032!.apikeyse"
  "rver.GenericKillResponse\"\000\022T\n\013PermKillKe"
  "y\022 .apikeyserver.RequestPermKillKey\032!.ap"
  "ikeyserver.GenericKillResponse\"\000\022W\n\rGetS"
  "erverInfo\022\037.apikeyserver.RequestServerIn"
  "fo\032#.apikeyserver.GetServerInfoResponse\""
  "\000B&\n\004mainB\014apiKeyServerP\001Z\016./apikeyserve"
  "rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_apiKeyServer_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_apiKeyServer_2eproto_sccs[12] = {
  &scc_info_GenericKillResponse_apiKeyServer_2eproto.base,
  &scc_info_GetKeyResponse_apiKeyServer_2eproto.base,
  &scc_info_GetServerInfoResponse_apiKeyServer_2eproto.base,
  &scc_info_KeyDetailsResponse_apiKeyServer_2eproto.base,
  &scc_info_KeyResponseRemaining_apiKeyServer_2eproto.base,
  &scc_info_KeyResponseTypeNames_apiKeyServer_2eproto.base,
  &scc_info_RequestKey_apiKeyServer_2eproto.base,
  &scc_info_RequestKillKey_apiKeyServer_2eproto.base,
  &scc_info_RequestPermKillKey_apiKeyServer_2eproto.base,
  &scc_info_RequestServerInfo_apiKeyServer_2eproto.base,
  &scc_info_RequestTimedKillKey_apiKeyServer_2eproto.base,
  &scc_info_TimedKillResponse_apiKeyServer_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_apiKeyServer_2eproto_once;
static bool descriptor_table_apiKeyServer_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_apiKeyServer_2eproto = {
  &descriptor_table_apiKeyServer_2eproto_initialized, descriptor_table_protodef_apiKeyServer_2eproto, "apiKeyServer.proto", 1729,
  &descriptor_table_apiKeyServer_2eproto_once, descriptor_table_apiKeyServer_2eproto_sccs, descriptor_table_apiKeyServer_2eproto_deps, 12, 1,
  schemas, file_default_instances, TableStruct_apiKeyServer_2eproto::offsets,
  file_level_metadata_apiKeyServer_2eproto, 12, file_level_enum_descriptors_apiKeyServer_2eproto, file_level_service_descriptors_apiKeyServer_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_apiKeyServer_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_apiKeyServer_2eproto), true);
namespace apikeyserver {

// ===================================================================

void RequestKey::InitAsDefaultInstance() {
  ::apikeyserver::_RequestKey_default_instance_._instance.get_mutable()->field_mask_ = const_cast< PROTOBUF_NAMESPACE_ID::FieldMask*>(
      PROTOBUF_NAMESPACE_ID::FieldMask::internal_default_instance());
}
class RequestKey::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::FieldMask& field_mask(const RequestKey* msg);
};

const PROTOBUF_NAMESPACE_ID::FieldMask&
RequestKey::_Internal::field_mask(const RequestKey* msg) {
  return *msg->field_mask_;
}
void RequestKey::clear_field_mask() {
  if (GetArenaNoVirtual() == nullptr && field_mask_ != nullptr) {
    delete field_mask_;
  }
  field_mask_ = nullptr;
}
RequestKey::RequestKey()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apikeyserver.RequestKey)
}
RequestKey::RequestKey(const RequestKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requester_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_requester().empty()) {
    requester_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requester_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from._internal_has_field_mask()) {
    field_mask_ = new PROTOBUF_NAMESPACE_ID::FieldMask(*from.field_mask_);
  } else {
    field_mask_ = nullptr;
  }
  acceptexhaustion_ = from.acceptexhaustion_;
  // @@protoc_insertion_point(copy_constructor:apikeyserver.RequestKey)
}

void RequestKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestKey_apiKeyServer_2eproto.base);
  requester_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&field_mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceptexhaustion_) -
      reinterpret_cast<char*>(&field_mask_)) + sizeof(acceptexhaustion_));
}

RequestKey::~RequestKey() {
  // @@protoc_insertion_point(destructor:apikeyserver.RequestKey)
  SharedDtor();
}

void RequestKey::SharedDtor() {
  requester_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete field_mask_;
}

void RequestKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestKey& RequestKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestKey_apiKeyServer_2eproto.base);
  return *internal_default_instance();
}


void RequestKey::Clear() {
// @@protoc_insertion_point(message_clear_start:apikeyserver.RequestKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requester_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && field_mask_ != nullptr) {
    delete field_mask_;
  }
  field_mask_ = nullptr;
  acceptexhaustion_ = false;
  _internal_metadata_.Clear();
}

const char* RequestKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string requester = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_requester();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apikeyserver.RequestKey.requester"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apikeyserver.RequestKey.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool acceptExhaustion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          acceptexhaustion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask field_mask = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_field_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apikeyserver.RequestKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string requester = 1;
  if (this->requester().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requester().data(), static_cast<int>(this->_internal_requester().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apikeyserver.RequestKey.requester");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_requester(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apikeyserver.RequestKey.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // bool acceptExhaustion = 3;
  if (this->acceptexhaustion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_acceptexhaustion(), target);
  }

  // .google.protobuf.FieldMask field_mask = 4;
  if (this->has_field_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::field_mask(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apikeyserver.RequestKey)
  return target;
}

size_t RequestKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apikeyserver.RequestKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string requester = 1;
  if (this->requester().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requester());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // .google.protobuf.FieldMask field_mask = 4;
  if (this->has_field_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *field_mask_);
  }

  // bool acceptExhaustion = 3;
  if (this->acceptexhaustion() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apikeyserver.RequestKey)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apikeyserver.RequestKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apikeyserver.RequestKey)
    MergeFrom(*source);
  }
}

void RequestKey::MergeFrom(const RequestKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apikeyserver.RequestKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.requester().size() > 0) {

    requester_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requester_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_field_mask()) {
    _internal_mutable_field_mask()->PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from._internal_field_mask());
  }
  if (from.acceptexhaustion() != 0) {
    _internal_set_acceptexhaustion(from._internal_acceptexhaustion());
  }
}

void RequestKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apikeyserver.RequestKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestKey::CopyFrom(const RequestKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apikeyserver.RequestKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestKey::IsInitialized() const {
  return true;
}

void RequestKey::InternalSwap(RequestKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  requester_.Swap(&other->requester_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(field_mask_, other->field_mask_);
  swap(acceptexhaustion_, other->acceptexhaustion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestServerInfo::InitAsDefaultInstance() {
  ::apikeyserver::_RequestServerInfo_default_instance_._instance.get_mutable()->field_mask_ = const_cast< PROTOBUF_NAMESPACE_ID::FieldMask*>(
      PROTOBUF_NAMESPACE_ID::FieldMask::internal_default_instance());
}
class RequestServerInfo::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::FieldMask& field_mask(const RequestServerInfo* msg);
};

const PROTOBUF_NAMESPACE_ID::FieldMask&
RequestServerInfo::_Internal::field_mask(const RequestServerInfo* msg) {
  return *msg->field_mask_;
}
void RequestServerInfo::clear_field_mask() {
  if (GetArenaNoVirtual() == nullptr && field_mask_ != nullptr) {
    delete field_mask_;
  }
  field_mask_ = nullptr;
}
RequestServerInfo::RequestServerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apikeyserver.RequestServerInfo)
}
RequestServerInfo::RequestServerInfo(const RequestServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requester_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_requester().empty()) {
    requester_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requester_);
  }
  if (from._internal_has_field_mask()) {
    field_mask_ = new PROTOBUF_NAMESPACE_ID::FieldMask(*from.field_mask_);
  } else {
    field_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apikeyserver.RequestServerInfo)
}

void RequestServerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestServerInfo_apiKeyServer_2eproto.base);
  requester_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_mask_ = nullptr;
}

RequestServerInfo::~RequestServerInfo() {
  // @@protoc_insertion_point(destructor:apikeyserver.RequestServerInfo)
  SharedDtor();
}

void RequestServerInfo::SharedDtor() {
  requester_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete field_mask_;
}

void RequestServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestServerInfo& RequestServerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestServerInfo_apiKeyServer_2eproto.base);
  return *internal_default_instance();
}


void RequestServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apikeyserver.RequestServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requester_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && field_mask_ != nullptr) {
    delete field_mask_;
  }
  field_mask_ = nullptr;
  _internal_metadata_.Clear();
}

const char* RequestServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string requester = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_requester();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apikeyserver.RequestServerInfo.requester"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask field_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_field_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestServerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apikeyserver.RequestServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string requester = 1;
  if (this->requester().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requester().data(), static_cast<int>(this->_internal_requester().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apikeyserver.RequestServerInfo.requester");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_requester(), target);
  }

  // .google.protobuf.FieldMask field_mask = 2;
  if (this->has_field_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::field_mask(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apikeyserver.RequestServerInfo)
  return target;
}

size_t RequestServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apikeyserver.RequestServerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string requester = 1;
  if (this->requester().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requester());
  }

  // .google.protobuf.FieldMask field_mask = 2;
  if (this->has_field_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *field_mask_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestServerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apikeyserver.RequestServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestServerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apikeyserver.RequestServerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apikeyserver.RequestServerInfo)
    MergeFrom(*source);
  }
}

void RequestServerInfo::MergeFrom(const RequestServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apikeyserver.RequestServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.requester().size() > 0) {

    requester_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requester_);
  }
  if (from.has_field_mask()) {
    _internal_mutable_field_mask()->PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from._internal_field_mask());
  }
}

void RequestServerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apikeyserver.RequestServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestServerInfo::CopyFrom(const RequestServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apikeyserver.RequestServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestServerInfo::IsInitialized() const {
  return true;
}

void RequestServerInfo::InternalSwap(RequestServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  requester_.Swap(&other->requester_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(field_mask_, other->field_mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestServerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetKeyResponse::InitAsDefaultInstance() {
}
class GetKeyResponse::_Internal {
 public:
};

GetKeyResponse::GetKeyResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apikeyserver.GetKeyResponse)
}
GetKeyResponse::GetKeyResponse(const GetKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&exhausted_) -
    reinterpret_cast<char*>(&time_)) + sizeof(exhausted_));
  // @@protoc_insertion_point(copy_constructor:apikeyserver.GetKeyResponse)
}

void GetKeyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetKeyResponse_apiKeyServer_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exhausted_) -
      reinterpret_cast<char*>(&time_)) + sizeof(exhausted_));
}

GetKeyResponse::~GetKeyResponse() {
  // @@protoc_insertion_point(destructor:apikeyserver.GetKeyResponse)
  SharedDtor();
}

void GetKeyResponse::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetKeyResponse& GetKeyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetKeyResponse_apiKeyServer_2eproto.base);
  return *internal_default_instance();
}


void GetKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apikeyserver.GetKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exhausted_) -
      reinterpret_cast<char*>(&time_)) + sizeof(exhausted_));
  _internal_metadata_.Clear();
}

const char* GetKeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apikeyserver.GetKeyResponse.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apikeyserver.GetKeyResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apikeyserver.GetKeyResponse.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apikeyserver.KeyResponseRemaining items = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool exhausted = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          exhausted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetKeyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apikeyserver.GetKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apikeyserver.GetKeyResponse.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apikeyserver.GetKeyResponse.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apikeyserver.GetKeyResponse.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  // int64 time = 4;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_time(), target);
  }

  // repeated .apikeyserver.KeyResponseRemaining items = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_items(i), target, stream);
  }

  // bool exhausted = 6;
  if (this->exhausted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_exhausted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apikeyserver.GetKeyResponse)
  return target;
}

size_t GetKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apikeyserver.GetKeyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apikeyserver.KeyResponseRemaining items = 5;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 3;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // int64 time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // bool exhausted = 6;
  if (this->exhausted() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetKeyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apikeyserver.GetKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetKeyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetKeyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apikeyserver.GetKeyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apikeyserver.GetKeyResponse)
    MergeFrom(*source);
  }
}

void GetKeyResponse::MergeFrom(const GetKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apikeyserver.GetKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.exhausted() != 0) {
    _internal_set_exhausted(from._internal_exhausted());
  }
}

void GetKeyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apikeyserver.GetKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetKeyResponse::CopyFrom(const GetKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apikeyserver.GetKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetKeyResponse::IsInitialized() const {
  return true;
}

void GetKeyResponse::InternalSwap(GetKeyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
  swap(exhausted_, other->exhausted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetKeyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyResponseRemaining::InitAsDefaultInstance() {
}
class KeyResponseRemaining::_Internal {
 public:
};

KeyResponseRemaining::KeyResponseRemaining()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apikeyserver.KeyResponseRemaining)
}
KeyResponseRemaining::KeyResponseRemaining(const KeyResponseRemaining& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keyresponsetypenames_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_keyresponsetypenames().empty()) {
    keyresponsetypenames_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.keyresponsetypenames_);
  }
  typeremaining_ = from.typeremaining_;
  // @@protoc_insertion_point(copy_constructor:apikeyserver.KeyResponseRemaining)
}

void KeyResponseRemaining::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyResponseRemaining_apiKeyServer_2eproto.base);
  keyresponsetypenames_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  typeremaining_ = 0u;
}

KeyResponseRemaining::~KeyResponseRemaining() {
  // @@protoc_insertion_point(destructor:apikeyserver.KeyResponseRemaining)
  SharedDtor();
}

void KeyResponseRemaining::SharedDtor() {
  keyresponsetypenames_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyResponseRemaining::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyResponseRemaining& KeyResponseRemaining::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyResponseRemaining_apiKeyServer_2eproto.base);
  return *internal_default_instance();
}


void KeyResponseRemaining::Clear() {
// @@protoc_insertion_point(message_clear_start:apikeyserver.KeyResponseRemaining)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keyresponsetypenames_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  typeremaining_ = 0u;
  _internal_metadata_.Clear();
}

const char* KeyResponseRemaining::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string KeyResponseTypeNames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_keyresponsetypenames();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apikeyserver.KeyResponseRemaining.KeyResponseTypeNames"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 typeRemaining = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          typeremaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyResponseRemaining::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apikeyserver.KeyResponseRemaining)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string KeyResponseTypeNames = 1;
  if (this->keyresponsetypenames().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_keyresponsetypenames().data(), static_cast<int>(this->_internal_keyresponsetypenames().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apikeyserver.KeyResponseRemaining.KeyResponseTypeNames");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_keyresponsetypenames(), target);
  }

  // uint32 typeRemaining = 2;
  if (this->typeremaining() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_typeremaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apikeyserver.KeyResponseRemaining)
  return target;
}

size_t KeyResponseRemaining::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apikeyserver.KeyResponseRemaining)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string KeyResponseTypeNames = 1;
  if (this->keyresponsetypenames().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_keyresponsetypenames());
  }

  // uint32 typeRemaining = 2;
  if (this->typeremaining() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_typeremaining());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyResponseRemaining::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apikeyserver.KeyResponseRemaining)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyResponseRemaining* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyResponseRemaining>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apikeyserver.KeyResponseRemaining)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apikeyserver.KeyResponseRemaining)
    MergeFrom(*source);
  }
}

void KeyResponseRemaining::MergeFrom(const KeyResponseRemaining& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apikeyserver.KeyResponseRemaining)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.keyresponsetypenames().size() > 0) {

    keyresponsetypenames_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.keyresponsetypenames_);
  }
  if (from.typeremaining() != 0) {
    _internal_set_typeremaining(from._internal_typeremaining());
  }
}

void KeyResponseRemaining::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apikeyserver.KeyResponseRemaining)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyResponseRemaining::CopyFrom(const KeyResponseRemaining& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apikeyserver.KeyResponseRemaining)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyResponseRemaining::IsInitialized() const {
  return true;
}

void KeyResponseRemaining::InternalSwap(KeyResponseRemaining* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  keyresponsetypenames_.Swap(&other->keyresponsetypenames_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(typeremaining_, other->typeremaining_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyResponseRemaining::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyResponseTypeNames::InitAsDefaultInstance() {
}
class KeyResponseTypeNames::_Internal {
 public:
};

KeyResponseTypeNames::KeyResponseTypeNames()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apikeyserver.KeyResponseTypeNames)
}
KeyResponseTypeNames::KeyResponseTypeNames(const KeyResponseTypeNames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  typename__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_typename_().empty()) {
    typename__.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.typename__);
  }
  // @@protoc_insertion_point(copy_constructor:apikeyserver.KeyResponseTypeNames)
}

void KeyResponseTypeNames::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyResponseTypeNames_apiKeyServer_2eproto.base);
  typename__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KeyResponseTypeNames::~KeyResponseTypeNames() {
  // @@protoc_insertion_point(destructor:apikeyserver.KeyResponseTypeNames)
  SharedDtor();
}

void KeyResponseTypeNames::SharedDtor() {
  typename__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyResponseTypeNames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyResponseTypeNames& KeyResponseTypeNames::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyResponseTypeNames_apiKeyServer_2eproto.base);
  return *internal_default_instance();
}


void KeyResponseTypeNames::Clear() {
// @@protoc_insertion_point(message_clear_start:apikeyserver.KeyResponseTypeNames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  typename__.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* KeyResponseTypeNames::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string typeName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_typename_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apikeyserver.KeyResponseTypeNames.typeName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyResponseTypeNames::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apikeyserver.KeyResponseTypeNames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string typeName = 1;
  if (this->typename_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_typename_().data(), static_cast<int>(this->_internal_typename_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apikeyserver.KeyResponseTypeNames.typeName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_typename_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apikeyserver.KeyResponseTypeNames)
  return target;
}

size_t KeyResponseTypeNames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apikeyserver.KeyResponseTypeNames)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string typeName = 1;
  if (this->typename_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_typename_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyResponseTypeNames::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apikeyserver.KeyResponseTypeNames)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyResponseTypeNames* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyResponseTypeNames>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apikeyserver.KeyResponseTypeNames)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apikeyserver.KeyResponseTypeNames)
    MergeFrom(*source);
  }
}

void KeyResponseTypeNames::MergeFrom(const KeyResponseTypeNames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apikeyserver.KeyResponseTypeNames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.typename_().size() > 0) {

    typename__.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.typename__);
  }
}

void KeyResponseTypeNames::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apikeyserver.KeyResponseTypeNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyResponseTypeNames::CopyFrom(const KeyResponseTypeNames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apikeyserver.KeyResponseTypeNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyResponseTypeNames::IsInitialized() const {
  return true;
}

void KeyResponseTypeNames::InternalSwap(KeyResponseTypeNames* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  typename__.Swap(&other->typename__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyResponseTypeNames::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestKillKey::InitAsDefaultInstance() {
}
class RequestKillKey::_Internal {
 public:
};

RequestKillKey::RequestKillKey()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apikeyserver.RequestKillKey)
}
RequestKillKey::RequestKillKey(const RequestKillKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requester_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_requester().empty()) {
    requester_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requester_);
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:apikeyserver.RequestKillKey)
}

void RequestKillKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestKillKey_apiKeyServer_2eproto.base);
  requester_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_ = PROTOBUF_LONGLONG(0);
}

RequestKillKey::~RequestKillKey() {
  // @@protoc_insertion_point(destructor:apikeyserver.RequestKillKey)
  SharedDtor();
}

void RequestKillKey::SharedDtor() {
  requester_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestKillKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestKillKey& RequestKillKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestKillKey_apiKeyServer_2eproto.base);
  return *internal_default_instance();
}


void RequestKillKey::Clear() {
// @@protoc_insertion_point(message_clear_start:apikeyserver.RequestKillKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requester_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* RequestKillKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string requester = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_requester();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apikeyserver.RequestKillKey.requester"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apikeyserver.RequestKillKey.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apikeyserver.RequestKillKey.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestKillKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apikeyserver.RequestKillKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string requester = 1;
  if (this->requester().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requester().data(), static_cast<int>(this->_internal_requester().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apikeyserver.RequestKillKey.requester");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_requester(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apikeyserver.RequestKillKey.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apikeyserver.RequestKillKey.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // int64 time = 4;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apikeyserver.RequestKillKey)
  return target;
}

size_t RequestKillKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apikeyserver.RequestKillKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string requester = 1;
  if (this->requester().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requester());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestKillKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apikeyserver.RequestKillKey)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestKillKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestKillKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apikeyserver.RequestKillKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apikeyserver.RequestKillKey)
    MergeFrom(*source);
  }
}

void RequestKillKey::MergeFrom(const RequestKillKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apikeyserver.RequestKillKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.requester().size() > 0) {

    requester_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requester_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void RequestKillKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apikeyserver.RequestKillKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestKillKey::CopyFrom(const RequestKillKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apikeyserver.RequestKillKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestKillKey::IsInitialized() const {
  return true;
}

void RequestKillKey::InternalSwap(RequestKillKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  requester_.Swap(&other->requester_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestKillKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestPermKillKey::InitAsDefaultInstance() {
}
class RequestPermKillKey::_Internal {
 public:
};

RequestPermKillKey::RequestPermKillKey()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apikeyserver.RequestPermKillKey)
}
RequestPermKillKey::RequestPermKillKey(const RequestPermKillKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requester_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_requester().empty()) {
    requester_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requester_);
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:apikeyserver.RequestPermKillKey)
}

void RequestPermKillKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestPermKillKey_apiKeyServer_2eproto.base);
  requester_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_ = PROTOBUF_LONGLONG(0);
}

RequestPermKillKey::~RequestPermKillKey() {
  // @@protoc_insertion_point(destructor:apikeyserver.RequestPermKillKey)
  SharedDtor();
}

void RequestPermKillKey::SharedDtor() {
  requester_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestPermKillKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestPermKillKey& RequestPermKillKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestPermKillKey_apiKeyServer_2eproto.base);
  return *internal_default_instance();
}


void RequestPermKillKey::Clear() {
// @@protoc_insertion_point(message_clear_start:apikeyserver.RequestPermKillKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requester_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* RequestPermKillKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string requester = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_requester();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apikeyserver.RequestPermKillKey.requester"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apikeyserver.RequestPermKillKey.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apikeyserver.RequestPermKillKey.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestPermKillKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apikeyserver.RequestPermKillKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string requester = 1;
  if (this->requester().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requester().data(), static_cast<int>(this->_internal_requester().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apikeyserver.RequestPermKillKey.requester");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_requester(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apikeyserver.RequestPermKillKey.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apikeyserver.RequestPermKillKey.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // int64 time = 4;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apikeyserver.RequestPermKillKey)
  return target;
}

size_t RequestPermKillKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apikeyserver.RequestPermKillKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string requester = 1;
  if (this->requester().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requester());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestPermKillKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apikeyserver.RequestPermKillKey)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestPermKillKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestPermKillKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apikeyserver.RequestPermKillKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apikeyserver.RequestPermKillKey)
    MergeFrom(*source);
  }
}

void RequestPermKillKey::MergeFrom(const RequestPermKillKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apikeyserver.RequestPermKillKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.requester().size() > 0) {

    requester_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requester_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void RequestPermKillKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apikeyserver.RequestPermKillKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPermKillKey::CopyFrom(const RequestPermKillKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apikeyserver.RequestPermKillKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPermKillKey::IsInitialized() const {
  return true;
}

void RequestPermKillKey::InternalSwap(RequestPermKillKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  requester_.Swap(&other->requester_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestPermKillKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestTimedKillKey::InitAsDefaultInstance() {
}
class RequestTimedKillKey::_Internal {
 public:
};

RequestTimedKillKey::RequestTimedKillKey()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apikeyserver.RequestTimedKillKey)
}
RequestTimedKillKey::RequestTimedKillKey(const RequestTimedKillKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requester_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_requester().empty()) {
    requester_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requester_);
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&returntime_) -
    reinterpret_cast<char*>(&time_)) + sizeof(returntime_));
  // @@protoc_insertion_point(copy_constructor:apikeyserver.RequestTimedKillKey)
}

void RequestTimedKillKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestTimedKillKey_apiKeyServer_2eproto.base);
  requester_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&returntime_) -
      reinterpret_cast<char*>(&time_)) + sizeof(returntime_));
}

RequestTimedKillKey::~RequestTimedKillKey() {
  // @@protoc_insertion_point(destructor:apikeyserver.RequestTimedKillKey)
  SharedDtor();
}

void RequestTimedKillKey::SharedDtor() {
  requester_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestTimedKillKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestTimedKillKey& RequestTimedKillKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestTimedKillKey_apiKeyServer_2eproto.base);
  return *internal_default_instance();
}


void RequestTimedKillKey::Clear() {
// @@protoc_insertion_point(message_clear_start:apikeyserver.RequestTimedKillKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requester_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&returntime_) -
      reinterpret_cast<char*>(&time_)) + sizeof(returntime_));
  _internal_metadata_.Clear();
}

const char* RequestTimedKillKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string requester = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_requester();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apikeyserver.RequestTimedKillKey.requester"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apikeyserver.RequestTimedKillKey.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apikeyserver.RequestTimedKillKey.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 returnTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          returntime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestTimedKillKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apikeyserver.RequestTimedKillKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string requester = 1;
  if (this->requester().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requester().data(), static_cast<int>(this->_internal_requester().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apikeyserver.RequestTimedKillKey.requester");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_requester(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apikeyserver.RequestTimedKillKey.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apikeyserver.RequestTimedKillKey.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // int64 time = 4;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_time(), target);
  }

  // int64 returnTime = 5;
  if (this->returntime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_returntime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apikeyserver.RequestTimedKillKey)
  return target;
}

size_t RequestTimedKillKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apikeyserver.RequestTimedKillKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string requester = 1;
  if (this->requester().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requester());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 returnTime = 5;
  if (this->returntime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_returntime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestTimedKillKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apikeyserver.RequestTimedKillKey)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestTimedKillKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestTimedKillKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apikeyserver.RequestTimedKillKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apikeyserver.RequestTimedKillKey)
    MergeFrom(*source);
  }
}

void RequestTimedKillKey::MergeFrom(const RequestTimedKillKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apikeyserver.RequestTimedKillKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.requester().size() > 0) {

    requester_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requester_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.returntime() != 0) {
    _internal_set_returntime(from._internal_returntime());
  }
}

void RequestTimedKillKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apikeyserver.RequestTimedKillKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestTimedKillKey::CopyFrom(const RequestTimedKillKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apikeyserver.RequestTimedKillKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTimedKillKey::IsInitialized() const {
  return true;
}

void RequestTimedKillKey::InternalSwap(RequestTimedKillKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  requester_.Swap(&other->requester_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
  swap(returntime_, other->returntime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestTimedKillKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenericKillResponse::InitAsDefaultInstance() {
}
class GenericKillResponse::_Internal {
 public:
};

GenericKillResponse::GenericKillResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apikeyserver.GenericKillResponse)
}
GenericKillResponse::GenericKillResponse(const GenericKillResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&time_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:apikeyserver.GenericKillResponse)
}

void GenericKillResponse::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&time_)) + sizeof(result_));
}

GenericKillResponse::~GenericKillResponse() {
  // @@protoc_insertion_point(destructor:apikeyserver.GenericKillResponse)
  SharedDtor();
}

void GenericKillResponse::SharedDtor() {
}

void GenericKillResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericKillResponse& GenericKillResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericKillResponse_apiKeyServer_2eproto.base);
  return *internal_default_instance();
}


void GenericKillResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apikeyserver.GenericKillResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&time_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* GenericKillResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericKillResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apikeyserver.GenericKillResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apikeyserver.GenericKillResponse)
  return target;
}

size_t GenericKillResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apikeyserver.GenericKillResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericKillResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apikeyserver.GenericKillResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericKillResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenericKillResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apikeyserver.GenericKillResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apikeyserver.GenericKillResponse)
    MergeFrom(*source);
  }
}

void GenericKillResponse::MergeFrom(const GenericKillResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apikeyserver.GenericKillResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void GenericKillResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apikeyserver.GenericKillResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericKillResponse::CopyFrom(const GenericKillResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apikeyserver.GenericKillResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericKillResponse::IsInitialized() const {
  return true;
}

void GenericKillResponse::InternalSwap(GenericKillResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_, other->time_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericKillResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimedKillResponse::InitAsDefaultInstance() {
  ::apikeyserver::_TimedKillResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::apikeyserver::GenericKillResponse*>(
      ::apikeyserver::GenericKillResponse::internal_default_instance());
}
class TimedKillResponse::_Internal {
 public:
  static const ::apikeyserver::GenericKillResponse& result(const TimedKillResponse* msg);
};

const ::apikeyserver::GenericKillResponse&
TimedKillResponse::_Internal::result(const TimedKillResponse* msg) {
  return *msg->result_;
}
TimedKillResponse::TimedKillResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apikeyserver.TimedKillResponse)
}
TimedKillResponse::TimedKillResponse(const TimedKillResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::apikeyserver::GenericKillResponse(*from.result_);
  } else {
    result_ = nullptr;
  }
  returntoservice_ = from.returntoservice_;
  // @@protoc_insertion_point(copy_constructor:apikeyserver.TimedKillResponse)
}

void TimedKillResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimedKillResponse_apiKeyServer_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&returntoservice_) -
      reinterpret_cast<char*>(&result_)) + sizeof(returntoservice_));
}

TimedKillResponse::~TimedKillResponse() {
  // @@protoc_insertion_point(destructor:apikeyserver.TimedKillResponse)
  SharedDtor();
}

void TimedKillResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void TimedKillResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimedKillResponse& TimedKillResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimedKillResponse_apiKeyServer_2eproto.base);
  return *internal_default_instance();
}


void TimedKillResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apikeyserver.TimedKillResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  returntoservice_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* TimedKillResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apikeyserver.GenericKillResponse result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 returnToService = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          returntoservice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimedKillResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apikeyserver.TimedKillResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .apikeyserver.GenericKillResponse result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // int64 returnToService = 2;
  if (this->returntoservice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_returntoservice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apikeyserver.TimedKillResponse)
  return target;
}

size_t TimedKillResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apikeyserver.TimedKillResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apikeyserver.GenericKillResponse result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // int64 returnToService = 2;
  if (this->returntoservice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_returntoservice());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimedKillResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apikeyserver.TimedKillResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TimedKillResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimedKillResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apikeyserver.TimedKillResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apikeyserver.TimedKillResponse)
    MergeFrom(*source);
  }
}

void TimedKillResponse::MergeFrom(const TimedKillResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apikeyserver.TimedKillResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::apikeyserver::GenericKillResponse::MergeFrom(from._internal_result());
  }
  if (from.returntoservice() != 0) {
    _internal_set_returntoservice(from._internal_returntoservice());
  }
}

void TimedKillResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apikeyserver.TimedKillResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimedKillResponse::CopyFrom(const TimedKillResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apikeyserver.TimedKillResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimedKillResponse::IsInitialized() const {
  return true;
}

void TimedKillResponse::InternalSwap(TimedKillResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(returntoservice_, other->returntoservice_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimedKillResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetServerInfoResponse::InitAsDefaultInstance() {
}
class GetServerInfoResponse::_Internal {
 public:
};

GetServerInfoResponse::GetServerInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apikeyserver.GetServerInfoResponse)
}
GetServerInfoResponse::GetServerInfoResponse(const GetServerInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serverversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serverversion().empty()) {
    serverversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serverversion_);
  }
  keynamespermakilled_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_keynamespermakilled().empty()) {
    keynamespermakilled_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.keynamespermakilled_);
  }
  ::memcpy(&totalavailableusespermin_, &from.totalavailableusespermin_,
    static_cast<size_t>(reinterpret_cast<char*>(&uptime_) -
    reinterpret_cast<char*>(&totalavailableusespermin_)) + sizeof(uptime_));
  // @@protoc_insertion_point(copy_constructor:apikeyserver.GetServerInfoResponse)
}

void GetServerInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServerInfoResponse_apiKeyServer_2eproto.base);
  serverversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keynamespermakilled_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&totalavailableusespermin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uptime_) -
      reinterpret_cast<char*>(&totalavailableusespermin_)) + sizeof(uptime_));
}

GetServerInfoResponse::~GetServerInfoResponse() {
  // @@protoc_insertion_point(destructor:apikeyserver.GetServerInfoResponse)
  SharedDtor();
}

void GetServerInfoResponse::SharedDtor() {
  serverversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keynamespermakilled_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetServerInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServerInfoResponse& GetServerInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServerInfoResponse_apiKeyServer_2eproto.base);
  return *internal_default_instance();
}


void GetServerInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apikeyserver.GetServerInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  serverversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keynamespermakilled_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&totalavailableusespermin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uptime_) -
      reinterpret_cast<char*>(&totalavailableusespermin_)) + sizeof(uptime_));
  _internal_metadata_.Clear();
}

const char* GetServerInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string serverVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serverversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apikeyserver.GetServerInfoResponse.serverVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 keyExhaustions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          keyexhaustions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 totalAvailableUsesPerMin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          totalavailableusespermin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 totalKeysServed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          totalkeysserved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 totalKeysKilled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          totalkeyskilled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string keyNamesPermaKilled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_keynamespermakilled();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apikeyserver.GetServerInfoResponse.keyNamesPermaKilled"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apikeyserver.KeyDetailsResponse items = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 uptime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          uptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float avgKeysServedPerMin = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          avgkeysservedpermin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServerInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apikeyserver.GetServerInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serverVersion = 1;
  if (this->serverversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverversion().data(), static_cast<int>(this->_internal_serverversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apikeyserver.GetServerInfoResponse.serverVersion");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serverversion(), target);
  }

  // uint32 keyExhaustions = 2;
  if (this->keyexhaustions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_keyexhaustions(), target);
  }

  // uint64 totalAvailableUsesPerMin = 3;
  if (this->totalavailableusespermin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_totalavailableusespermin(), target);
  }

  // uint64 totalKeysServed = 4;
  if (this->totalkeysserved() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_totalkeysserved(), target);
  }

  // uint64 totalKeysKilled = 5;
  if (this->totalkeyskilled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_totalkeyskilled(), target);
  }

  // string keyNamesPermaKilled = 6;
  if (this->keynamespermakilled().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_keynamespermakilled().data(), static_cast<int>(this->_internal_keynamespermakilled().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apikeyserver.GetServerInfoResponse.keyNamesPermaKilled");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_keynamespermakilled(), target);
  }

  // repeated .apikeyserver.KeyDetailsResponse items = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_items(i), target, stream);
  }

  // int64 time = 8;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_time(), target);
  }

  // int64 uptime = 9;
  if (this->uptime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_uptime(), target);
  }

  // float avgKeysServedPerMin = 10;
  if (!(this->avgkeysservedpermin() <= 0 && this->avgkeysservedpermin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_avgkeysservedpermin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apikeyserver.GetServerInfoResponse)
  return target;
}

size_t GetServerInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apikeyserver.GetServerInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apikeyserver.KeyDetailsResponse items = 7;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string serverVersion = 1;
  if (this->serverversion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverversion());
  }

  // string keyNamesPermaKilled = 6;
  if (this->keynamespermakilled().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_keynamespermakilled());
  }

  // uint64 totalAvailableUsesPerMin = 3;
  if (this->totalavailableusespermin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_totalavailableusespermin());
  }

  // uint64 totalKeysServed = 4;
  if (this->totalkeysserved() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_totalkeysserved());
  }

  // uint64 totalKeysKilled = 5;
  if (this->totalkeyskilled() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_totalkeyskilled());
  }

  // uint32 keyExhaustions = 2;
  if (this->keyexhaustions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_keyexhaustions());
  }

  // float avgKeysServedPerMin = 10;
  if (!(this->avgkeysservedpermin() <= 0 && this->avgkeysservedpermin() >= 0)) {
    total_size += 1 + 4;
  }

  // int64 time = 8;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 uptime = 9;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_uptime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServerInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apikeyserver.GetServerInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServerInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServerInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apikeyserver.GetServerInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apikeyserver.GetServerInfoResponse)
    MergeFrom(*source);
  }
}

void GetServerInfoResponse::MergeFrom(const GetServerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apikeyserver.GetServerInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.serverversion().size() > 0) {

    serverversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serverversion_);
  }
  if (from.keynamespermakilled().size() > 0) {

    keynamespermakilled_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.keynamespermakilled_);
  }
  if (from.totalavailableusespermin() != 0) {
    _internal_set_totalavailableusespermin(from._internal_totalavailableusespermin());
  }
  if (from.totalkeysserved() != 0) {
    _internal_set_totalkeysserved(from._internal_totalkeysserved());
  }
  if (from.totalkeyskilled() != 0) {
    _internal_set_totalkeyskilled(from._internal_totalkeyskilled());
  }
  if (from.keyexhaustions() != 0) {
    _internal_set_keyexhaustions(from._internal_keyexhaustions());
  }
  if (!(from.avgkeysservedpermin() <= 0 && from.avgkeysservedpermin() >= 0)) {
    _internal_set_avgkeysservedpermin(from._internal_avgkeysservedpermin());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.uptime() != 0) {
    _internal_set_uptime(from._internal_uptime());
  }
}

void GetServerInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apikeyserver.GetServerInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerInfoResponse::CopyFrom(const GetServerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apikeyserver.GetServerInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerInfoResponse::IsInitialized() const {
  return true;
}

void GetServerInfoResponse::InternalSwap(GetServerInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  serverversion_.Swap(&other->serverversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  keynamespermakilled_.Swap(&other->keynamespermakilled_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(totalavailableusespermin_, other->totalavailableusespermin_);
  swap(totalkeysserved_, other->totalkeysserved_);
  swap(totalkeyskilled_, other->totalkeyskilled_);
  swap(keyexhaustions_, other->keyexhaustions_);
  swap(avgkeysservedpermin_, other->avgkeysservedpermin_);
  swap(time_, other->time_);
  swap(uptime_, other->uptime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServerInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyDetailsResponse::InitAsDefaultInstance() {
}
class KeyDetailsResponse::_Internal {
 public:
};

KeyDetailsResponse::KeyDetailsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apikeyserver.KeyDetailsResponse)
}
KeyDetailsResponse::KeyDetailsResponse(const KeyDetailsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  types_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_types().empty()) {
    types_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.types_);
  }
  ::memcpy(&uses_, &from.uses_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&uses_)) + sizeof(active_));
  // @@protoc_insertion_point(copy_constructor:apikeyserver.KeyDetailsResponse)
}

void KeyDetailsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyDetailsResponse_apiKeyServer_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  types_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uses_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&uses_)) + sizeof(active_));
}

KeyDetailsResponse::~KeyDetailsResponse() {
  // @@protoc_insertion_point(destructor:apikeyserver.KeyDetailsResponse)
  SharedDtor();
}

void KeyDetailsResponse::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  types_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyDetailsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyDetailsResponse& KeyDetailsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyDetailsResponse_apiKeyServer_2eproto.base);
  return *internal_default_instance();
}


void KeyDetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apikeyserver.KeyDetailsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  types_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uses_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&uses_)) + sizeof(active_));
  _internal_metadata_.Clear();
}

const char* KeyDetailsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apikeyserver.KeyDetailsResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_types();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apikeyserver.KeyDetailsResponse.types"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 kills = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyDetailsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apikeyserver.KeyDetailsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apikeyserver.KeyDetailsResponse.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string types = 2;
  if (this->types().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_types().data(), static_cast<int>(this->_internal_types().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apikeyserver.KeyDetailsResponse.types");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_types(), target);
  }

  // uint32 uses = 3;
  if (this->uses() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uses(), target);
  }

  // uint32 kills = 4;
  if (this->kills() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kills(), target);
  }

  // bool active = 5;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apikeyserver.KeyDetailsResponse)
  return target;
}

size_t KeyDetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apikeyserver.KeyDetailsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string types = 2;
  if (this->types().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_types());
  }

  // uint32 uses = 3;
  if (this->uses() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uses());
  }

  // uint32 kills = 4;
  if (this->kills() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_kills());
  }

  // bool active = 5;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyDetailsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apikeyserver.KeyDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyDetailsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyDetailsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apikeyserver.KeyDetailsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apikeyserver.KeyDetailsResponse)
    MergeFrom(*source);
  }
}

void KeyDetailsResponse::MergeFrom(const KeyDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apikeyserver.KeyDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.types().size() > 0) {

    types_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.types_);
  }
  if (from.uses() != 0) {
    _internal_set_uses(from._internal_uses());
  }
  if (from.kills() != 0) {
    _internal_set_kills(from._internal_kills());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
}

void KeyDetailsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apikeyserver.KeyDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyDetailsResponse::CopyFrom(const KeyDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apikeyserver.KeyDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyDetailsResponse::IsInitialized() const {
  return true;
}

void KeyDetailsResponse::InternalSwap(KeyDetailsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  types_.Swap(&other->types_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uses_, other->uses_);
  swap(kills_, other->kills_);
  swap(active_, other->active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyDetailsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace apikeyserver
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apikeyserver::RequestKey* Arena::CreateMaybeMessage< ::apikeyserver::RequestKey >(Arena* arena) {
  return Arena::CreateInternal< ::apikeyserver::RequestKey >(arena);
}
template<> PROTOBUF_NOINLINE ::apikeyserver::RequestServerInfo* Arena::CreateMaybeMessage< ::apikeyserver::RequestServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::apikeyserver::RequestServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apikeyserver::GetKeyResponse* Arena::CreateMaybeMessage< ::apikeyserver::GetKeyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::apikeyserver::GetKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apikeyserver::KeyResponseRemaining* Arena::CreateMaybeMessage< ::apikeyserver::KeyResponseRemaining >(Arena* arena) {
  return Arena::CreateInternal< ::apikeyserver::KeyResponseRemaining >(arena);
}
template<> PROTOBUF_NOINLINE ::apikeyserver::KeyResponseTypeNames* Arena::CreateMaybeMessage< ::apikeyserver::KeyResponseTypeNames >(Arena* arena) {
  return Arena::CreateInternal< ::apikeyserver::KeyResponseTypeNames >(arena);
}
template<> PROTOBUF_NOINLINE ::apikeyserver::RequestKillKey* Arena::CreateMaybeMessage< ::apikeyserver::RequestKillKey >(Arena* arena) {
  return Arena::CreateInternal< ::apikeyserver::RequestKillKey >(arena);
}
template<> PROTOBUF_NOINLINE ::apikeyserver::RequestPermKillKey* Arena::CreateMaybeMessage< ::apikeyserver::RequestPermKillKey >(Arena* arena) {
  return Arena::CreateInternal< ::apikeyserver::RequestPermKillKey >(arena);
}
template<> PROTOBUF_NOINLINE ::apikeyserver::RequestTimedKillKey* Arena::CreateMaybeMessage< ::apikeyserver::RequestTimedKillKey >(Arena* arena) {
  return Arena::CreateInternal< ::apikeyserver::RequestTimedKillKey >(arena);
}
template<> PROTOBUF_NOINLINE ::apikeyserver::GenericKillResponse* Arena::CreateMaybeMessage< ::apikeyserver::GenericKillResponse >(Arena* arena) {
  return Arena::CreateInternal< ::apikeyserver::GenericKillResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apikeyserver::TimedKillResponse* Arena::CreateMaybeMessage< ::apikeyserver::TimedKillResponse >(Arena* arena) {
  return Arena::CreateInternal< ::apikeyserver::TimedKillResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apikeyserver::GetServerInfoResponse* Arena::CreateMaybeMessage< ::apikeyserver::GetServerInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::apikeyserver::GetServerInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apikeyserver::KeyDetailsResponse* Arena::CreateMaybeMessage< ::apikeyserver::KeyDetailsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::apikeyserver::KeyDetailsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
