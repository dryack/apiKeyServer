// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: apiKeyServer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apikeyserver {

  /// <summary>Holder for reflection information generated from apiKeyServer.proto</summary>
  public static partial class ApiKeyServerReflection {

    #region Descriptor
    /// <summary>File descriptor for apiKeyServer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ApiKeyServerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJhcGlLZXlTZXJ2ZXIucHJvdG8SDGFwaWtleXNlcnZlchogZ29vZ2xlL3By",
            "b3RvYnVmL2ZpZWxkX21hc2sucHJvdG8idwoKUmVxdWVzdEtleRIRCglyZXF1",
            "ZXN0ZXIYASABKAkSDAoEdHlwZRgCIAEoCRIYChBhY2NlcHRFeGhhdXN0aW9u",
            "GAMgASgIEi4KCmZpZWxkX21hc2sYBCABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "RmllbGRNYXNrIlYKEVJlcXVlc3RTZXJ2ZXJJbmZvEhEKCXJlcXVlc3RlchgB",
            "IAEoCRIuCgpmaWVsZF9tYXNrGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLkZp",
            "ZWxkTWFzayKNAQoOR2V0S2V5UmVzcG9uc2USCwoDa2V5GAEgASgJEgwKBG5h",
            "bWUYAiABKAkSDAoEdHlwZRgDIAEoCRIMCgR0aW1lGAQgASgDEjEKBWl0ZW1z",
            "GAUgAygLMiIuYXBpa2V5c2VydmVyLktleVJlc3BvbnNlUmVtYWluaW5nEhEK",
            "CWV4aGF1c3RlZBgGIAEoCCJLChRLZXlSZXNwb25zZVJlbWFpbmluZxIcChRL",
            "ZXlSZXNwb25zZVR5cGVOYW1lcxgBIAEoCRIVCg10eXBlUmVtYWluaW5nGAIg",
            "ASgNIigKFEtleVJlc3BvbnNlVHlwZU5hbWVzEhAKCHR5cGVOYW1lGAEgASgJ",
            "IkwKDlJlcXVlc3RLaWxsS2V5EhEKCXJlcXVlc3RlchgBIAEoCRILCgNrZXkY",
            "AiABKAkSDAoEbmFtZRgDIAEoCRIMCgR0aW1lGAQgASgDIlAKElJlcXVlc3RQ",
            "ZXJtS2lsbEtleRIRCglyZXF1ZXN0ZXIYASABKAkSCwoDa2V5GAIgASgJEgwK",
            "BG5hbWUYAyABKAkSDAoEdGltZRgEIAEoAyJlChNSZXF1ZXN0VGltZWRLaWxs",
            "S2V5EhEKCXJlcXVlc3RlchgBIAEoCRILCgNrZXkYAiABKAkSDAoEbmFtZRgD",
            "IAEoCRIMCgR0aW1lGAQgASgDEhIKCnJldHVyblRpbWUYBSABKAMiMwoTR2Vu",
            "ZXJpY0tpbGxSZXNwb25zZRIOCgZyZXN1bHQYASABKAgSDAoEdGltZRgCIAEo",
            "AyJfChFUaW1lZEtpbGxSZXNwb25zZRIxCgZyZXN1bHQYASABKAsyIS5hcGlr",
            "ZXlzZXJ2ZXIuR2VuZXJpY0tpbGxSZXNwb25zZRIXCg9yZXR1cm5Ub1NlcnZp",
            "Y2UYAiABKAMiowIKFUdldFNlcnZlckluZm9SZXNwb25zZRIVCg1zZXJ2ZXJW",
            "ZXJzaW9uGAEgASgJEhYKDmtleUV4aGF1c3Rpb25zGAIgASgNEiAKGHRvdGFs",
            "QXZhaWxhYmxlVXNlc1Blck1pbhgDIAEoBBIXCg90b3RhbEtleXNTZXJ2ZWQY",
            "BCABKAQSFwoPdG90YWxLZXlzS2lsbGVkGAUgASgEEhsKE2tleU5hbWVzUGVy",
            "bWFLaWxsZWQYBiABKAkSLwoFaXRlbXMYByADKAsyIC5hcGlrZXlzZXJ2ZXIu",
            "S2V5RGV0YWlsc1Jlc3BvbnNlEgwKBHRpbWUYCCABKAMSDgoGdXB0aW1lGAkg",
            "ASgDEhsKE2F2Z0tleXNTZXJ2ZWRQZXJNaW4YCiABKAIiXgoSS2V5RGV0YWls",
            "c1Jlc3BvbnNlEgwKBG5hbWUYASABKAkSDQoFdHlwZXMYAiABKAkSDAoEdXNl",
            "cxgDIAEoDRINCgVraWxscxgEIAEoDRIOCgZhY3RpdmUYBSABKAgyzwIKDEFw",
            "aUtleVNlcnZlchJCCgZHZXRLZXkSGC5hcGlrZXlzZXJ2ZXIuUmVxdWVzdEtl",
            "eRocLmFwaWtleXNlcnZlci5HZXRLZXlSZXNwb25zZSIAEkwKB0tpbGxLZXkS",
            "HC5hcGlrZXlzZXJ2ZXIuUmVxdWVzdEtpbGxLZXkaIS5hcGlrZXlzZXJ2ZXIu",
            "R2VuZXJpY0tpbGxSZXNwb25zZSIAElQKC1Blcm1LaWxsS2V5EiAuYXBpa2V5",
            "c2VydmVyLlJlcXVlc3RQZXJtS2lsbEtleRohLmFwaWtleXNlcnZlci5HZW5l",
            "cmljS2lsbFJlc3BvbnNlIgASVwoNR2V0U2VydmVySW5mbxIfLmFwaWtleXNl",
            "cnZlci5SZXF1ZXN0U2VydmVySW5mbxojLmFwaWtleXNlcnZlci5HZXRTZXJ2",
            "ZXJJbmZvUmVzcG9uc2UiAEImCgRtYWluQgxhcGlLZXlTZXJ2ZXJQAVoOLi9h",
            "cGlrZXlzZXJ2ZXJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apikeyserver.RequestKey), global::Apikeyserver.RequestKey.Parser, new[]{ "Requester", "Type", "AcceptExhaustion", "FieldMask" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apikeyserver.RequestServerInfo), global::Apikeyserver.RequestServerInfo.Parser, new[]{ "Requester", "FieldMask" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apikeyserver.GetKeyResponse), global::Apikeyserver.GetKeyResponse.Parser, new[]{ "Key", "Name", "Type", "Time", "Items", "Exhausted" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apikeyserver.KeyResponseRemaining), global::Apikeyserver.KeyResponseRemaining.Parser, new[]{ "KeyResponseTypeNames", "TypeRemaining" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apikeyserver.KeyResponseTypeNames), global::Apikeyserver.KeyResponseTypeNames.Parser, new[]{ "TypeName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apikeyserver.RequestKillKey), global::Apikeyserver.RequestKillKey.Parser, new[]{ "Requester", "Key", "Name", "Time" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apikeyserver.RequestPermKillKey), global::Apikeyserver.RequestPermKillKey.Parser, new[]{ "Requester", "Key", "Name", "Time" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apikeyserver.RequestTimedKillKey), global::Apikeyserver.RequestTimedKillKey.Parser, new[]{ "Requester", "Key", "Name", "Time", "ReturnTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apikeyserver.GenericKillResponse), global::Apikeyserver.GenericKillResponse.Parser, new[]{ "Result", "Time" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apikeyserver.TimedKillResponse), global::Apikeyserver.TimedKillResponse.Parser, new[]{ "Result", "ReturnToService" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apikeyserver.GetServerInfoResponse), global::Apikeyserver.GetServerInfoResponse.Parser, new[]{ "ServerVersion", "KeyExhaustions", "TotalAvailableUsesPerMin", "TotalKeysServed", "TotalKeysKilled", "KeyNamesPermaKilled", "Items", "Time", "Uptime", "AvgKeysServedPerMin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apikeyserver.KeyDetailsResponse), global::Apikeyserver.KeyDetailsResponse.Parser, new[]{ "Name", "Types_", "Uses", "Kills", "Active" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// request a new key from the server
  /// </summary>
  public sealed partial class RequestKey : pb::IMessage<RequestKey> {
    private static readonly pb::MessageParser<RequestKey> _parser = new pb::MessageParser<RequestKey>(() => new RequestKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apikeyserver.ApiKeyServerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestKey(RequestKey other) : this() {
      requester_ = other.requester_;
      type_ = other.type_;
      acceptExhaustion_ = other.acceptExhaustion_;
      fieldMask_ = other.fieldMask_ != null ? other.fieldMask_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestKey Clone() {
      return new RequestKey(this);
    }

    /// <summary>Field number for the "requester" field.</summary>
    public const int RequesterFieldNumber = 1;
    private string requester_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Requester {
      get { return requester_; }
      set {
        requester_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "acceptExhaustion" field.</summary>
    public const int AcceptExhaustionFieldNumber = 3;
    private bool acceptExhaustion_;
    /// <summary>
    /// requester doesn't want to wait, and instead wishes be told there are no keys available
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AcceptExhaustion {
      get { return acceptExhaustion_; }
      set {
        acceptExhaustion_ = value;
      }
    }

    /// <summary>Field number for the "field_mask" field.</summary>
    public const int FieldMaskFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.FieldMask fieldMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask FieldMask {
      get { return fieldMask_; }
      set {
        fieldMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Requester != other.Requester) return false;
      if (Type != other.Type) return false;
      if (AcceptExhaustion != other.AcceptExhaustion) return false;
      if (!object.Equals(FieldMask, other.FieldMask)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Requester.Length != 0) hash ^= Requester.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (AcceptExhaustion != false) hash ^= AcceptExhaustion.GetHashCode();
      if (fieldMask_ != null) hash ^= FieldMask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Requester.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Requester);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (AcceptExhaustion != false) {
        output.WriteRawTag(24);
        output.WriteBool(AcceptExhaustion);
      }
      if (fieldMask_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FieldMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Requester.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Requester);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (AcceptExhaustion != false) {
        size += 1 + 1;
      }
      if (fieldMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FieldMask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestKey other) {
      if (other == null) {
        return;
      }
      if (other.Requester.Length != 0) {
        Requester = other.Requester;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.AcceptExhaustion != false) {
        AcceptExhaustion = other.AcceptExhaustion;
      }
      if (other.fieldMask_ != null) {
        if (fieldMask_ == null) {
          FieldMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        FieldMask.MergeFrom(other.FieldMask);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Requester = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 24: {
            AcceptExhaustion = input.ReadBool();
            break;
          }
          case 34: {
            if (fieldMask_ == null) {
              FieldMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(FieldMask);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// request information about the server
  /// </summary>
  public sealed partial class RequestServerInfo : pb::IMessage<RequestServerInfo> {
    private static readonly pb::MessageParser<RequestServerInfo> _parser = new pb::MessageParser<RequestServerInfo>(() => new RequestServerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apikeyserver.ApiKeyServerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestServerInfo(RequestServerInfo other) : this() {
      requester_ = other.requester_;
      fieldMask_ = other.fieldMask_ != null ? other.fieldMask_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestServerInfo Clone() {
      return new RequestServerInfo(this);
    }

    /// <summary>Field number for the "requester" field.</summary>
    public const int RequesterFieldNumber = 1;
    private string requester_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Requester {
      get { return requester_; }
      set {
        requester_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "field_mask" field.</summary>
    public const int FieldMaskFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.FieldMask fieldMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask FieldMask {
      get { return fieldMask_; }
      set {
        fieldMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Requester != other.Requester) return false;
      if (!object.Equals(FieldMask, other.FieldMask)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Requester.Length != 0) hash ^= Requester.GetHashCode();
      if (fieldMask_ != null) hash ^= FieldMask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Requester.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Requester);
      }
      if (fieldMask_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FieldMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Requester.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Requester);
      }
      if (fieldMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FieldMask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Requester.Length != 0) {
        Requester = other.Requester;
      }
      if (other.fieldMask_ != null) {
        if (fieldMask_ == null) {
          FieldMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        FieldMask.MergeFrom(other.FieldMask);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Requester = input.ReadString();
            break;
          }
          case 18: {
            if (fieldMask_ == null) {
              FieldMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(FieldMask);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// responding to RequestKey
  /// </summary>
  public sealed partial class GetKeyResponse : pb::IMessage<GetKeyResponse> {
    private static readonly pb::MessageParser<GetKeyResponse> _parser = new pb::MessageParser<GetKeyResponse>(() => new GetKeyResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetKeyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apikeyserver.ApiKeyServerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetKeyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetKeyResponse(GetKeyResponse other) : this() {
      key_ = other.key_;
      name_ = other.name_;
      type_ = other.type_;
      time_ = other.time_;
      items_ = other.items_.Clone();
      exhausted_ = other.exhausted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetKeyResponse Clone() {
      return new GetKeyResponse(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private long time_;
    /// <summary>
    /// unixNano
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Apikeyserver.KeyResponseRemaining> _repeated_items_codec
        = pb::FieldCodec.ForMessage(42, global::Apikeyserver.KeyResponseRemaining.Parser);
    private readonly pbc::RepeatedField<global::Apikeyserver.KeyResponseRemaining> items_ = new pbc::RepeatedField<global::Apikeyserver.KeyResponseRemaining>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apikeyserver.KeyResponseRemaining> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "exhausted" field.</summary>
    public const int ExhaustedFieldNumber = 6;
    private bool exhausted_;
    /// <summary>
    /// no keys remaining
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Exhausted {
      get { return exhausted_; }
      set {
        exhausted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetKeyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetKeyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (Time != other.Time) return false;
      if(!items_.Equals(other.items_)) return false;
      if (Exhausted != other.Exhausted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      hash ^= items_.GetHashCode();
      if (Exhausted != false) hash ^= Exhausted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (Time != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Time);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (Exhausted != false) {
        output.WriteRawTag(48);
        output.WriteBool(Exhausted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (Exhausted != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetKeyResponse other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      items_.Add(other.items_);
      if (other.Exhausted != false) {
        Exhausted = other.Exhausted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 32: {
            Time = input.ReadInt64();
            break;
          }
          case 42: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 48: {
            Exhausted = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// sub-response for RequestKey
  /// </summary>
  public sealed partial class KeyResponseRemaining : pb::IMessage<KeyResponseRemaining> {
    private static readonly pb::MessageParser<KeyResponseRemaining> _parser = new pb::MessageParser<KeyResponseRemaining>(() => new KeyResponseRemaining());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyResponseRemaining> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apikeyserver.ApiKeyServerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyResponseRemaining() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyResponseRemaining(KeyResponseRemaining other) : this() {
      keyResponseTypeNames_ = other.keyResponseTypeNames_;
      typeRemaining_ = other.typeRemaining_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyResponseRemaining Clone() {
      return new KeyResponseRemaining(this);
    }

    /// <summary>Field number for the "KeyResponseTypeNames" field.</summary>
    public const int KeyResponseTypeNamesFieldNumber = 1;
    private string keyResponseTypeNames_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyResponseTypeNames {
      get { return keyResponseTypeNames_; }
      set {
        keyResponseTypeNames_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "typeRemaining" field.</summary>
    public const int TypeRemainingFieldNumber = 2;
    private uint typeRemaining_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TypeRemaining {
      get { return typeRemaining_; }
      set {
        typeRemaining_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyResponseRemaining);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyResponseRemaining other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyResponseTypeNames != other.KeyResponseTypeNames) return false;
      if (TypeRemaining != other.TypeRemaining) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyResponseTypeNames.Length != 0) hash ^= KeyResponseTypeNames.GetHashCode();
      if (TypeRemaining != 0) hash ^= TypeRemaining.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyResponseTypeNames.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(KeyResponseTypeNames);
      }
      if (TypeRemaining != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TypeRemaining);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyResponseTypeNames.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyResponseTypeNames);
      }
      if (TypeRemaining != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TypeRemaining);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyResponseRemaining other) {
      if (other == null) {
        return;
      }
      if (other.KeyResponseTypeNames.Length != 0) {
        KeyResponseTypeNames = other.KeyResponseTypeNames;
      }
      if (other.TypeRemaining != 0) {
        TypeRemaining = other.TypeRemaining;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            KeyResponseTypeNames = input.ReadString();
            break;
          }
          case 16: {
            TypeRemaining = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// type for KeyResponseRemaining
  /// </summary>
  public sealed partial class KeyResponseTypeNames : pb::IMessage<KeyResponseTypeNames> {
    private static readonly pb::MessageParser<KeyResponseTypeNames> _parser = new pb::MessageParser<KeyResponseTypeNames>(() => new KeyResponseTypeNames());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyResponseTypeNames> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apikeyserver.ApiKeyServerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyResponseTypeNames() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyResponseTypeNames(KeyResponseTypeNames other) : this() {
      typeName_ = other.typeName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyResponseTypeNames Clone() {
      return new KeyResponseTypeNames(this);
    }

    /// <summary>Field number for the "typeName" field.</summary>
    public const int TypeNameFieldNumber = 1;
    private string typeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeName {
      get { return typeName_; }
      set {
        typeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyResponseTypeNames);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyResponseTypeNames other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeName != other.TypeName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeName.Length != 0) hash ^= TypeName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TypeName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyResponseTypeNames other) {
      if (other == null) {
        return;
      }
      if (other.TypeName.Length != 0) {
        TypeName = other.TypeName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TypeName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request a key be unusable until the keys are re-initialized
  /// </summary>
  public sealed partial class RequestKillKey : pb::IMessage<RequestKillKey> {
    private static readonly pb::MessageParser<RequestKillKey> _parser = new pb::MessageParser<RequestKillKey>(() => new RequestKillKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestKillKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apikeyserver.ApiKeyServerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestKillKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestKillKey(RequestKillKey other) : this() {
      requester_ = other.requester_;
      key_ = other.key_;
      name_ = other.name_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestKillKey Clone() {
      return new RequestKillKey(this);
    }

    /// <summary>Field number for the "requester" field.</summary>
    public const int RequesterFieldNumber = 1;
    private string requester_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Requester {
      get { return requester_; }
      set {
        requester_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private long time_;
    /// <summary>
    /// unixNano
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestKillKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestKillKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Requester != other.Requester) return false;
      if (Key != other.Key) return false;
      if (Name != other.Name) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Requester.Length != 0) hash ^= Requester.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Requester.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Requester);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Time != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Requester.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Requester);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestKillKey other) {
      if (other == null) {
        return;
      }
      if (other.Requester.Length != 0) {
        Requester = other.Requester;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Requester = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request a key be permanently killed until the service is restarted
  /// </summary>
  public sealed partial class RequestPermKillKey : pb::IMessage<RequestPermKillKey> {
    private static readonly pb::MessageParser<RequestPermKillKey> _parser = new pb::MessageParser<RequestPermKillKey>(() => new RequestPermKillKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestPermKillKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apikeyserver.ApiKeyServerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestPermKillKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestPermKillKey(RequestPermKillKey other) : this() {
      requester_ = other.requester_;
      key_ = other.key_;
      name_ = other.name_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestPermKillKey Clone() {
      return new RequestPermKillKey(this);
    }

    /// <summary>Field number for the "requester" field.</summary>
    public const int RequesterFieldNumber = 1;
    private string requester_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Requester {
      get { return requester_; }
      set {
        requester_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private long time_;
    /// <summary>
    /// unixNano
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestPermKillKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestPermKillKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Requester != other.Requester) return false;
      if (Key != other.Key) return false;
      if (Name != other.Name) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Requester.Length != 0) hash ^= Requester.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Requester.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Requester);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Time != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Requester.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Requester);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestPermKillKey other) {
      if (other == null) {
        return;
      }
      if (other.Requester.Length != 0) {
        Requester = other.Requester;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Requester = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request a key be killed for until t Time
  /// </summary>
  public sealed partial class RequestTimedKillKey : pb::IMessage<RequestTimedKillKey> {
    private static readonly pb::MessageParser<RequestTimedKillKey> _parser = new pb::MessageParser<RequestTimedKillKey>(() => new RequestTimedKillKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestTimedKillKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apikeyserver.ApiKeyServerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTimedKillKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTimedKillKey(RequestTimedKillKey other) : this() {
      requester_ = other.requester_;
      key_ = other.key_;
      name_ = other.name_;
      time_ = other.time_;
      returnTime_ = other.returnTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTimedKillKey Clone() {
      return new RequestTimedKillKey(this);
    }

    /// <summary>Field number for the "requester" field.</summary>
    public const int RequesterFieldNumber = 1;
    private string requester_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Requester {
      get { return requester_; }
      set {
        requester_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private long time_;
    /// <summary>
    /// unixNano
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "returnTime" field.</summary>
    public const int ReturnTimeFieldNumber = 5;
    private long returnTime_;
    /// <summary>
    /// time when key will be returned to service
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReturnTime {
      get { return returnTime_; }
      set {
        returnTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestTimedKillKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestTimedKillKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Requester != other.Requester) return false;
      if (Key != other.Key) return false;
      if (Name != other.Name) return false;
      if (Time != other.Time) return false;
      if (ReturnTime != other.ReturnTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Requester.Length != 0) hash ^= Requester.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (ReturnTime != 0L) hash ^= ReturnTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Requester.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Requester);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Time != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Time);
      }
      if (ReturnTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ReturnTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Requester.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Requester);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (ReturnTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReturnTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestTimedKillKey other) {
      if (other == null) {
        return;
      }
      if (other.Requester.Length != 0) {
        Requester = other.Requester;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.ReturnTime != 0L) {
        ReturnTime = other.ReturnTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Requester = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Time = input.ReadInt64();
            break;
          }
          case 40: {
            ReturnTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// response for RequestKillKey and RequestPermKillKey
  /// </summary>
  public sealed partial class GenericKillResponse : pb::IMessage<GenericKillResponse> {
    private static readonly pb::MessageParser<GenericKillResponse> _parser = new pb::MessageParser<GenericKillResponse>(() => new GenericKillResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GenericKillResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apikeyserver.ApiKeyServerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenericKillResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenericKillResponse(GenericKillResponse other) : this() {
      result_ = other.result_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenericKillResponse Clone() {
      return new GenericKillResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private long time_;
    /// <summary>
    /// unixNano
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GenericKillResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GenericKillResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != false) hash ^= Result.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != false) {
        output.WriteRawTag(8);
        output.WriteBool(Result);
      }
      if (Time != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != false) {
        size += 1 + 1;
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GenericKillResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadBool();
            break;
          }
          case 16: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TimedKillResponse : pb::IMessage<TimedKillResponse> {
    private static readonly pb::MessageParser<TimedKillResponse> _parser = new pb::MessageParser<TimedKillResponse>(() => new TimedKillResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimedKillResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apikeyserver.ApiKeyServerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimedKillResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimedKillResponse(TimedKillResponse other) : this() {
      result_ = other.result_ != null ? other.result_.Clone() : null;
      returnToService_ = other.returnToService_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimedKillResponse Clone() {
      return new TimedKillResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::Apikeyserver.GenericKillResponse result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apikeyserver.GenericKillResponse Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "returnToService" field.</summary>
    public const int ReturnToServiceFieldNumber = 2;
    private long returnToService_;
    /// <summary>
    ///unixNano
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReturnToService {
      get { return returnToService_; }
      set {
        returnToService_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimedKillResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimedKillResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Result, other.Result)) return false;
      if (ReturnToService != other.ReturnToService) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (result_ != null) hash ^= Result.GetHashCode();
      if (ReturnToService != 0L) hash ^= ReturnToService.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Result);
      }
      if (ReturnToService != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ReturnToService);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (ReturnToService != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReturnToService);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimedKillResponse other) {
      if (other == null) {
        return;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::Apikeyserver.GenericKillResponse();
        }
        Result.MergeFrom(other.Result);
      }
      if (other.ReturnToService != 0L) {
        ReturnToService = other.ReturnToService;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (result_ == null) {
              Result = new global::Apikeyserver.GenericKillResponse();
            }
            input.ReadMessage(Result);
            break;
          }
          case 16: {
            ReturnToService = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// response for RequestServerInfo
  /// </summary>
  public sealed partial class GetServerInfoResponse : pb::IMessage<GetServerInfoResponse> {
    private static readonly pb::MessageParser<GetServerInfoResponse> _parser = new pb::MessageParser<GetServerInfoResponse>(() => new GetServerInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetServerInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apikeyserver.ApiKeyServerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServerInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServerInfoResponse(GetServerInfoResponse other) : this() {
      serverVersion_ = other.serverVersion_;
      keyExhaustions_ = other.keyExhaustions_;
      totalAvailableUsesPerMin_ = other.totalAvailableUsesPerMin_;
      totalKeysServed_ = other.totalKeysServed_;
      totalKeysKilled_ = other.totalKeysKilled_;
      keyNamesPermaKilled_ = other.keyNamesPermaKilled_;
      items_ = other.items_.Clone();
      time_ = other.time_;
      uptime_ = other.uptime_;
      avgKeysServedPerMin_ = other.avgKeysServedPerMin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServerInfoResponse Clone() {
      return new GetServerInfoResponse(this);
    }

    /// <summary>Field number for the "serverVersion" field.</summary>
    public const int ServerVersionFieldNumber = 1;
    private string serverVersion_ = "";
    /// <summary>
    /// keys.ServerVersion
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerVersion {
      get { return serverVersion_; }
      set {
        serverVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keyExhaustions" field.</summary>
    public const int KeyExhaustionsFieldNumber = 2;
    private uint keyExhaustions_;
    /// <summary>
    /// keys.TotalExhaustions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KeyExhaustions {
      get { return keyExhaustions_; }
      set {
        keyExhaustions_ = value;
      }
    }

    /// <summary>Field number for the "totalAvailableUsesPerMin" field.</summary>
    public const int TotalAvailableUsesPerMinFieldNumber = 3;
    private ulong totalAvailableUsesPerMin_;
    /// <summary>
    /// keys.TotalPerMinute
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalAvailableUsesPerMin {
      get { return totalAvailableUsesPerMin_; }
      set {
        totalAvailableUsesPerMin_ = value;
      }
    }

    /// <summary>Field number for the "totalKeysServed" field.</summary>
    public const int TotalKeysServedFieldNumber = 4;
    private ulong totalKeysServed_;
    /// <summary>
    /// keys.TotalKeysServed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalKeysServed {
      get { return totalKeysServed_; }
      set {
        totalKeysServed_ = value;
      }
    }

    /// <summary>Field number for the "totalKeysKilled" field.</summary>
    public const int TotalKeysKilledFieldNumber = 5;
    private ulong totalKeysKilled_;
    /// <summary>
    /// computed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalKeysKilled {
      get { return totalKeysKilled_; }
      set {
        totalKeysKilled_ = value;
      }
    }

    /// <summary>Field number for the "keyNamesPermaKilled" field.</summary>
    public const int KeyNamesPermaKilledFieldNumber = 6;
    private string keyNamesPermaKilled_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyNamesPermaKilled {
      get { return keyNamesPermaKilled_; }
      set {
        keyNamesPermaKilled_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Apikeyserver.KeyDetailsResponse> _repeated_items_codec
        = pb::FieldCodec.ForMessage(58, global::Apikeyserver.KeyDetailsResponse.Parser);
    private readonly pbc::RepeatedField<global::Apikeyserver.KeyDetailsResponse> items_ = new pbc::RepeatedField<global::Apikeyserver.KeyDetailsResponse>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apikeyserver.KeyDetailsResponse> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 8;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "uptime" field.</summary>
    public const int UptimeFieldNumber = 9;
    private long uptime_;
    /// <summary>
    /// computed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uptime {
      get { return uptime_; }
      set {
        uptime_ = value;
      }
    }

    /// <summary>Field number for the "avgKeysServedPerMin" field.</summary>
    public const int AvgKeysServedPerMinFieldNumber = 10;
    private float avgKeysServedPerMin_;
    /// <summary>
    /// computed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AvgKeysServedPerMin {
      get { return avgKeysServedPerMin_; }
      set {
        avgKeysServedPerMin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetServerInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetServerInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerVersion != other.ServerVersion) return false;
      if (KeyExhaustions != other.KeyExhaustions) return false;
      if (TotalAvailableUsesPerMin != other.TotalAvailableUsesPerMin) return false;
      if (TotalKeysServed != other.TotalKeysServed) return false;
      if (TotalKeysKilled != other.TotalKeysKilled) return false;
      if (KeyNamesPermaKilled != other.KeyNamesPermaKilled) return false;
      if(!items_.Equals(other.items_)) return false;
      if (Time != other.Time) return false;
      if (Uptime != other.Uptime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AvgKeysServedPerMin, other.AvgKeysServedPerMin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerVersion.Length != 0) hash ^= ServerVersion.GetHashCode();
      if (KeyExhaustions != 0) hash ^= KeyExhaustions.GetHashCode();
      if (TotalAvailableUsesPerMin != 0UL) hash ^= TotalAvailableUsesPerMin.GetHashCode();
      if (TotalKeysServed != 0UL) hash ^= TotalKeysServed.GetHashCode();
      if (TotalKeysKilled != 0UL) hash ^= TotalKeysKilled.GetHashCode();
      if (KeyNamesPermaKilled.Length != 0) hash ^= KeyNamesPermaKilled.GetHashCode();
      hash ^= items_.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (Uptime != 0L) hash ^= Uptime.GetHashCode();
      if (AvgKeysServedPerMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AvgKeysServedPerMin);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServerVersion);
      }
      if (KeyExhaustions != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(KeyExhaustions);
      }
      if (TotalAvailableUsesPerMin != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TotalAvailableUsesPerMin);
      }
      if (TotalKeysServed != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TotalKeysServed);
      }
      if (TotalKeysKilled != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(TotalKeysKilled);
      }
      if (KeyNamesPermaKilled.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(KeyNamesPermaKilled);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (Time != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Time);
      }
      if (Uptime != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Uptime);
      }
      if (AvgKeysServedPerMin != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(AvgKeysServedPerMin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerVersion);
      }
      if (KeyExhaustions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KeyExhaustions);
      }
      if (TotalAvailableUsesPerMin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalAvailableUsesPerMin);
      }
      if (TotalKeysServed != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalKeysServed);
      }
      if (TotalKeysKilled != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalKeysKilled);
      }
      if (KeyNamesPermaKilled.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyNamesPermaKilled);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (Uptime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uptime);
      }
      if (AvgKeysServedPerMin != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetServerInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.ServerVersion.Length != 0) {
        ServerVersion = other.ServerVersion;
      }
      if (other.KeyExhaustions != 0) {
        KeyExhaustions = other.KeyExhaustions;
      }
      if (other.TotalAvailableUsesPerMin != 0UL) {
        TotalAvailableUsesPerMin = other.TotalAvailableUsesPerMin;
      }
      if (other.TotalKeysServed != 0UL) {
        TotalKeysServed = other.TotalKeysServed;
      }
      if (other.TotalKeysKilled != 0UL) {
        TotalKeysKilled = other.TotalKeysKilled;
      }
      if (other.KeyNamesPermaKilled.Length != 0) {
        KeyNamesPermaKilled = other.KeyNamesPermaKilled;
      }
      items_.Add(other.items_);
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.Uptime != 0L) {
        Uptime = other.Uptime;
      }
      if (other.AvgKeysServedPerMin != 0F) {
        AvgKeysServedPerMin = other.AvgKeysServedPerMin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServerVersion = input.ReadString();
            break;
          }
          case 16: {
            KeyExhaustions = input.ReadUInt32();
            break;
          }
          case 24: {
            TotalAvailableUsesPerMin = input.ReadUInt64();
            break;
          }
          case 32: {
            TotalKeysServed = input.ReadUInt64();
            break;
          }
          case 40: {
            TotalKeysKilled = input.ReadUInt64();
            break;
          }
          case 50: {
            KeyNamesPermaKilled = input.ReadString();
            break;
          }
          case 58: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 64: {
            Time = input.ReadInt64();
            break;
          }
          case 72: {
            Uptime = input.ReadInt64();
            break;
          }
          case 85: {
            AvgKeysServedPerMin = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// sub-response on the details of each key for GetServerInfoResponse
  /// </summary>
  public sealed partial class KeyDetailsResponse : pb::IMessage<KeyDetailsResponse> {
    private static readonly pb::MessageParser<KeyDetailsResponse> _parser = new pb::MessageParser<KeyDetailsResponse>(() => new KeyDetailsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyDetailsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apikeyserver.ApiKeyServerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyDetailsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyDetailsResponse(KeyDetailsResponse other) : this() {
      name_ = other.name_;
      types_ = other.types_;
      uses_ = other.uses_;
      kills_ = other.kills_;
      active_ = other.active_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyDetailsResponse Clone() {
      return new KeyDetailsResponse(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "types" field.</summary>
    public const int Types_FieldNumber = 2;
    private string types_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Types_ {
      get { return types_; }
      set {
        types_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uses" field.</summary>
    public const int UsesFieldNumber = 3;
    private uint uses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uses {
      get { return uses_; }
      set {
        uses_ = value;
      }
    }

    /// <summary>Field number for the "kills" field.</summary>
    public const int KillsFieldNumber = 4;
    private uint kills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Kills {
      get { return kills_; }
      set {
        kills_ = value;
      }
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 5;
    private bool active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyDetailsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyDetailsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Types_ != other.Types_) return false;
      if (Uses != other.Uses) return false;
      if (Kills != other.Kills) return false;
      if (Active != other.Active) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Types_.Length != 0) hash ^= Types_.GetHashCode();
      if (Uses != 0) hash ^= Uses.GetHashCode();
      if (Kills != 0) hash ^= Kills.GetHashCode();
      if (Active != false) hash ^= Active.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Types_.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Types_);
      }
      if (Uses != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Uses);
      }
      if (Kills != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Kills);
      }
      if (Active != false) {
        output.WriteRawTag(40);
        output.WriteBool(Active);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Types_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Types_);
      }
      if (Uses != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uses);
      }
      if (Kills != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kills);
      }
      if (Active != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyDetailsResponse other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Types_.Length != 0) {
        Types_ = other.Types_;
      }
      if (other.Uses != 0) {
        Uses = other.Uses;
      }
      if (other.Kills != 0) {
        Kills = other.Kills;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Types_ = input.ReadString();
            break;
          }
          case 24: {
            Uses = input.ReadUInt32();
            break;
          }
          case 32: {
            Kills = input.ReadUInt32();
            break;
          }
          case 40: {
            Active = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
