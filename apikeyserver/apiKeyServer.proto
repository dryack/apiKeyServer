// apiKeyServer - gRCP/protobufs API key server for Torn API
//    Copyright (C) 2021  Dave Ryack
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published
//    by the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.

syntax = "proto3";

import "google/protobuf/field_mask.proto";

option java_multiple_files = true;
option java_package = "main";
option java_outer_classname = "apiKeyServer";
option go_package = "./apikeyserver";

package apikeyserver;

service ApiKeyServer {
    rpc GetKey(RequestKey) returns (GetKeyResponse) {}
    rpc KillKey(RequestKillKey) returns (GenericKillResponse) {}
    rpc PermKillKey(RequestPermKillKey) returns (GenericKillResponse) {}
    rpc TimedKillKey(RequestTimedKillKey) returns (TimedKillResponse) {}
    rpc GetServerInfo(RequestServerInfo) returns (GetServerInfoResponse) {}
}

// request a new key from the server
message RequestKey {
    string requester = 1;
    string type = 2;
    bool   acceptExhaustion = 3;// requester doesn't want to wait, and instead wishes be told there are no keys available
    google.protobuf.FieldMask field_mask = 4;
}

// request information about the server
message RequestServerInfo {
    string requester = 1;
    google.protobuf.FieldMask field_mask = 2;
}

// responding to RequestKey
message GetKeyResponse {
    string key = 1;
    string name = 2;
    string type = 3;
    int64 time = 4; // unixNano
    repeated KeyResponseRemaining items = 5;
    bool exhausted = 6;  // no keys remaining
}

// sub-response for RequestKey
message KeyResponseRemaining {
    string KeyResponseTypeNames = 1;
    uint32 typeRemaining = 2;
}

// type for KeyResponseRemaining
message KeyResponseTypeNames {
    string typeName = 1;
}

// Request a key be unusable until the keys are re-initialized (every minute)
message RequestKillKey {
    string requester = 1;
    string key = 2;
    string name = 3;
    int64 time = 4; // unixNano
}

// Request a key be permanently killed until the service is restarted
message RequestPermKillKey {
    string requester = 1;
    string key = 2;
    string name = 3;
    int64 time = 4; // unixNano
}

// Request a key be killed for until t Time
message RequestTimedKillKey {
    string requester = 1;
    string key = 2;
    string name = 3;
    int64 time = 4; // unixNano
    int64 returnTime = 5; // time when key will be returned to service
}

// response for RequestKillKey and RequestPermKillKey
message GenericKillResponse {
    bool result = 1;
    int64 time = 2; // unixNano
}

message TimedKillResponse {
    GenericKillResponse result = 1;
    int64 returnToService = 2; //unixNano
}

// response for RequestServerInfo
message GetServerInfoResponse {
    string serverVersion = 1; // keys.ServerVersion
    uint32 keyExhaustions = 2; // keys.TotalExhaustions
    uint64 totalAvailableUsesPerMin = 3; // keys.TotalPerMinute
    uint64 totalKeysServed = 4; // keys.TotalKeysServed
    uint64 totalKeysKilled = 5; // computed
    string keyNamesPermaKilled = 6;
    repeated KeyDetailsResponse items = 7;
    int64 time = 8;
    int64 uptime = 9; // computed
    float avgKeysServedPerMin = 10; // computed
}

// sub-response on the details of each key for GetServerInfoResponse
message KeyDetailsResponse {
    string name = 1;
    string types = 2;
    uint32 uses = 3;
    uint32 kills = 4;
    bool active = 5;
}
