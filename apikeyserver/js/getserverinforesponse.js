// source: apiKeyServer.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.apikeyserver.GetServerInfoResponse');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.apikeyserver.KeyDetailsResponse');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apikeyserver.GetServerInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apikeyserver.GetServerInfoResponse.repeatedFields_, null);
};
goog.inherits(proto.apikeyserver.GetServerInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apikeyserver.GetServerInfoResponse.displayName = 'proto.apikeyserver.GetServerInfoResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apikeyserver.GetServerInfoResponse.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apikeyserver.GetServerInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.apikeyserver.GetServerInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apikeyserver.GetServerInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apikeyserver.GetServerInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverversion: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keyexhaustions: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalavailableusespermin: jspb.Message.getFieldWithDefault(msg, 3, 0),
    totalkeysserved: jspb.Message.getFieldWithDefault(msg, 4, 0),
    totalkeyskilled: jspb.Message.getFieldWithDefault(msg, 5, 0),
    keynamespermakilled: jspb.Message.getFieldWithDefault(msg, 6, ""),
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.apikeyserver.KeyDetailsResponse.toObject, includeInstance),
    time: jspb.Message.getFieldWithDefault(msg, 8, 0),
    uptime: jspb.Message.getFieldWithDefault(msg, 9, 0),
    avgkeysservedpermin: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apikeyserver.GetServerInfoResponse}
 */
proto.apikeyserver.GetServerInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apikeyserver.GetServerInfoResponse;
  return proto.apikeyserver.GetServerInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apikeyserver.GetServerInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apikeyserver.GetServerInfoResponse}
 */
proto.apikeyserver.GetServerInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerversion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKeyexhaustions(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalavailableusespermin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalkeysserved(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalkeyskilled(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeynamespermakilled(value);
      break;
    case 7:
      var value = new proto.apikeyserver.KeyDetailsResponse;
      reader.readMessage(value,proto.apikeyserver.KeyDetailsResponse.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUptime(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAvgkeysservedpermin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apikeyserver.GetServerInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apikeyserver.GetServerInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apikeyserver.GetServerInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apikeyserver.GetServerInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerversion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKeyexhaustions();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTotalavailableusespermin();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTotalkeysserved();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getTotalkeyskilled();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getKeynamespermakilled();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.apikeyserver.KeyDetailsResponse.serializeBinaryToWriter
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getUptime();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getAvgkeysservedpermin();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
};


/**
 * optional string serverVersion = 1;
 * @return {string}
 */
proto.apikeyserver.GetServerInfoResponse.prototype.getServerversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apikeyserver.GetServerInfoResponse} returns this
 */
proto.apikeyserver.GetServerInfoResponse.prototype.setServerversion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 keyExhaustions = 2;
 * @return {number}
 */
proto.apikeyserver.GetServerInfoResponse.prototype.getKeyexhaustions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apikeyserver.GetServerInfoResponse} returns this
 */
proto.apikeyserver.GetServerInfoResponse.prototype.setKeyexhaustions = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 totalAvailableUsesPerMin = 3;
 * @return {number}
 */
proto.apikeyserver.GetServerInfoResponse.prototype.getTotalavailableusespermin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apikeyserver.GetServerInfoResponse} returns this
 */
proto.apikeyserver.GetServerInfoResponse.prototype.setTotalavailableusespermin = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 totalKeysServed = 4;
 * @return {number}
 */
proto.apikeyserver.GetServerInfoResponse.prototype.getTotalkeysserved = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apikeyserver.GetServerInfoResponse} returns this
 */
proto.apikeyserver.GetServerInfoResponse.prototype.setTotalkeysserved = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 totalKeysKilled = 5;
 * @return {number}
 */
proto.apikeyserver.GetServerInfoResponse.prototype.getTotalkeyskilled = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apikeyserver.GetServerInfoResponse} returns this
 */
proto.apikeyserver.GetServerInfoResponse.prototype.setTotalkeyskilled = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string keyNamesPermaKilled = 6;
 * @return {string}
 */
proto.apikeyserver.GetServerInfoResponse.prototype.getKeynamespermakilled = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.apikeyserver.GetServerInfoResponse} returns this
 */
proto.apikeyserver.GetServerInfoResponse.prototype.setKeynamespermakilled = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated KeyDetailsResponse items = 7;
 * @return {!Array<!proto.apikeyserver.KeyDetailsResponse>}
 */
proto.apikeyserver.GetServerInfoResponse.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.apikeyserver.KeyDetailsResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apikeyserver.KeyDetailsResponse, 7));
};


/**
 * @param {!Array<!proto.apikeyserver.KeyDetailsResponse>} value
 * @return {!proto.apikeyserver.GetServerInfoResponse} returns this
*/
proto.apikeyserver.GetServerInfoResponse.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.apikeyserver.KeyDetailsResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apikeyserver.KeyDetailsResponse}
 */
proto.apikeyserver.GetServerInfoResponse.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.apikeyserver.KeyDetailsResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apikeyserver.GetServerInfoResponse} returns this
 */
proto.apikeyserver.GetServerInfoResponse.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};


/**
 * optional int64 time = 8;
 * @return {number}
 */
proto.apikeyserver.GetServerInfoResponse.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.apikeyserver.GetServerInfoResponse} returns this
 */
proto.apikeyserver.GetServerInfoResponse.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 uptime = 9;
 * @return {number}
 */
proto.apikeyserver.GetServerInfoResponse.prototype.getUptime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.apikeyserver.GetServerInfoResponse} returns this
 */
proto.apikeyserver.GetServerInfoResponse.prototype.setUptime = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional float avgKeysServedPerMin = 10;
 * @return {number}
 */
proto.apikeyserver.GetServerInfoResponse.prototype.getAvgkeysservedpermin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apikeyserver.GetServerInfoResponse} returns this
 */
proto.apikeyserver.GetServerInfoResponse.prototype.setAvgkeysservedpermin = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


